This is guile-opengl.info, produced by makeinfo version 6.6 from
guile-opengl.texi.

This manual is for Guile-OpenGL (version 0.1.0, updated 15 June 2019)

   Copyright (C) 2014 Free Software Foundation, Inc.  and others.

     Guile-OpenGL is free software: you can redistribute and/or modify
     it and its documentation under the terms of the GNU Lesser General
     Public License as published by the Free Software Foundation, either
     version 3 of the License, or (at your option) any later version.

     Guile-OpenGL is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
     Lesser General Public License for more details.

     You should have received a copy of the GNU Lesser General Public
     License along with this program.  If not, see
     <http://www.gnu.org/licenses/>.

   Portions of this document were generated from the upstream OpenGL
documentation.  The work as a whole is redistributable under the license
above.  Sections containing generated documentation are prefixed with a
specific copyright header.
INFO-DIR-SECTION The Algorithmic Language Scheme
START-INFO-DIR-ENTRY
* opengl: (guile-opengl).              OpenGL for Guile.
* gl: (guile-opengl)GL.                A Scheme interface to the OpenGL API.
* glx: (guile-opengl)GLX.              Using OpenGL with the X Window System.
* glu: (guile-opengl)GLU.              The GL Utility library.
* glut: (guile-opengl)GLUT.            The GL Utility Toolkit.
END-INFO-DIR-ENTRY


File: guile-opengl.info,  Node: GLX,  Next: GLUT,  Prev: GLU,  Up: Top

5 GLX
*****

* Menu:

* GLX API::                     The high-level interface to GLX.
* GLX Enumerations::            GLX enumerated values.
* Low-Level GLX::               Primitive interface to "glx" functionality.


File: guile-opengl.info,  Node: GLX API,  Next: GLX Enumerations,  Up: GLX

5.1 GLX API
===========

Import the GLX module to have access to these procedures:

     (use-modules (glx))

   The GLX specification is available at
<http://www.opengl.org/registry/doc/glx1.3.pdf>.

* Menu:


File: guile-opengl.info,  Node: GLX Enumerations,  Next: Low-Level GLX,  Prev: GLX API,  Up: GLX

5.2 GLX Enumerations
====================

The functions from this section may be had by loading the module:

     (use-modules (glx enums)

 -- Macro: glx-string-name enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'vendor', 'version', 'extensions'.

 -- Macro: glx-error-code enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'bad-screen', 'bad-attribute', 'no-extension', 'bad-visual',
     'bad-context', 'bad-value', 'bad-enum',
     'bad-hyperpipe-config-sgix', 'bad-hyperpipe-sgix'.

 -- Macro: glx-drawable-type-mask enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'window-bit', 'pixmap-bit', 'pbuffer-bit', 'window-bit-sgix',
     'pixmap-bit-sgix', 'pbuffer-bit-sgix'.

 -- Macro: glx-render-type-mask enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'rgba-bit', 'color-index-bit', 'rgba-bit-sgix',
     'color-index-bit-sgix', 'rgba-float-bit-arb',
     'rgba-unsigned-float-bit-ext'.

 -- Macro: glx-sync-type enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'sync-frame-sgix', 'sync-swap-sgix'.

 -- Macro: glx-event-mask enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'pbuffer-clobber-mask', 'buffer-clobber-mask-sgix',
     'buffer-swap-complete-intel-mask'.

 -- Macro: glx-pbuffer-clobber-mask enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'front-left-buffer-bit', 'front-right-buffer-bit',
     'back-left-buffer-bit', 'back-right-buffer-bit', 'aux-buffers-bit',
     'depth-buffer-bit', 'stencil-buffer-bit', 'accum-buffer-bit',
     'front-left-buffer-bit-sgix', 'front-right-buffer-bit-sgix',
     'back-left-buffer-bit-sgix', 'back-right-buffer-bit-sgix',
     'aux-buffers-bit-sgix', 'depth-buffer-bit-sgix',
     'stencil-buffer-bit-sgix', 'accum-buffer-bit-sgix',
     'sample-buffers-bit-sgix'.

 -- Macro: glx-hyperpipe-type-mask enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'hyperpipe-display-pipe-sgix', 'hyperpipe-render-pipe-sgix'.

 -- Macro: glx-hyperpipe-attrib enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'pipe-rect-sgix', 'pipe-rect-limits-sgix', 'hyperpipe-stereo-sgix',
     'hyperpipe-pixel-average-sgix'.

 -- Macro: glx-hyperpipe-misc enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'hyperpipe-pipe-name-length-sgix'.

 -- Macro: glx-bind-to-texture-target-mask enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'texture-1d-bit-ext', 'texture-2d-bit-ext',
     'texture-rectangle-bit-ext'.

 -- Macro: glx-context-flags enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'context-debug-bit-arb', 'context-forward-compatible-bit-arb',
     'context-robust-access-bit-arb', 'context-reset-isolation-bit-arb'.

 -- Macro: glx-context-profile-mask enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'context-core-profile-bit-arb',
     'context-compatibility-profile-bit-arb',
     'context-es-profile-bit-ext', 'context-es2-profile-bit-ext'.

 -- Macro: glx-attribute enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'use-gl', 'buffer-size', 'level', 'rgba', 'doublebuffer', 'stereo',
     'aux-buffers', 'red-size', 'green-size', 'blue-size', 'alpha-size',
     'depth-size', 'stencil-size', 'accum-red-size', 'accum-green-size',
     'accum-blue-size', 'accum-alpha-size', 'config-caveat',
     'x-visual-type', 'transparent-type', 'transparent-index-value',
     'transparent-red-value', 'transparent-green-value',
     'transparent-blue-value', 'transparent-alpha-value', 'dont-care',
     'none', 'slow-config', 'true-color', 'direct-color',
     'pseudo-color', 'static-color', 'gray-scale', 'static-gray',
     'transparent-rgb', 'transparent-index', 'visual-id', 'screen',
     'non-conformant-config', 'drawable-type', 'render-type',
     'x-renderable', 'fbconfig-id', 'rgba-type', 'color-index-type',
     'max-pbuffer-width', 'max-pbuffer-height', 'max-pbuffer-pixels',
     'preserved-contents', 'largest-pbuffer', 'width', 'height',
     'event-mask', 'damaged', 'saved', 'window', 'pbuffer',
     'pbuffer-height', 'pbuffer-width', 'visual-caveat-ext',
     'x-visual-type-ext', 'transparent-type-ext',
     'transparent-index-value-ext', 'transparent-red-value-ext',
     'transparent-green-value-ext', 'transparent-blue-value-ext',
     'transparent-alpha-value-ext', 'none-ext', 'slow-visual-ext',
     'true-color-ext', 'direct-color-ext', 'pseudo-color-ext',
     'static-color-ext', 'gray-scale-ext', 'static-gray-ext',
     'transparent-rgb-ext', 'transparent-index-ext',
     'share-context-ext', 'visual-id-ext', 'screen-ext',
     'non-conformant-visual-ext', 'drawable-type-sgix',
     'render-type-sgix', 'x-renderable-sgix', 'fbconfig-id-sgix',
     'rgba-type-sgix', 'color-index-type-sgix',
     'max-pbuffer-width-sgix', 'max-pbuffer-height-sgix',
     'max-pbuffer-pixels-sgix', 'optimal-pbuffer-width-sgix',
     'optimal-pbuffer-height-sgix', 'preserved-contents-sgix',
     'largest-pbuffer-sgix', 'width-sgix', 'height-sgix',
     'event-mask-sgix', 'damaged-sgix', 'saved-sgix', 'window-sgix',
     'pbuffer-sgix', 'digital-media-pbuffer-sgix', 'blended-rgba-sgis',
     'multisample-sub-rect-width-sgis',
     'multisample-sub-rect-height-sgis', 'visual-select-group-sgix',
     'hyperpipe-id-sgix', 'sample-buffers-sgis', 'samples-sgis',
     'sample-buffers-arb', 'samples-arb', 'sample-buffers', 'samples',
     'coverage-samples-nv', 'context-major-version-arb',
     'context-minor-version-arb', 'context-flags-arb',
     'context-allow-buffer-byte-order-mismatch-arb',
     'float-components-nv', 'rgba-unsigned-float-type-ext',
     'framebuffer-srgb-capable-arb', 'framebuffer-srgb-capable-ext',
     'color-samples-nv', 'rgba-float-type-arb', 'video-out-color-nv',
     'video-out-alpha-nv', 'video-out-depth-nv',
     'video-out-color-and-alpha-nv', 'video-out-color-and-depth-nv',
     'video-out-frame-nv', 'video-out-field-1-nv',
     'video-out-field-2-nv', 'video-out-stacked-fields-1-2-nv',
     'video-out-stacked-fields-2-1-nv', 'device-id-nv', 'unique-id-nv',
     'num-video-capture-slots-nv', 'bind-to-texture-rgb-ext',
     'bind-to-texture-rgba-ext', 'bind-to-mipmap-texture-ext',
     'bind-to-texture-targets-ext', 'y-inverted-ext',
     'texture-format-ext', 'texture-target-ext', 'mipmap-texture-ext',
     'texture-format-none-ext', 'texture-format-rgb-ext',
     'texture-format-rgba-ext', 'texture-1d-ext', 'texture-2d-ext',
     'texture-rectangle-ext', 'front-left-ext', 'front-right-ext',
     'back-left-ext', 'back-right-ext', 'front-ext', 'back-ext',
     'aux0-ext', 'aux1-ext', 'aux2-ext', 'aux3-ext', 'aux4-ext',
     'aux5-ext', 'aux6-ext', 'aux7-ext', 'aux8-ext', 'aux9-ext'.

 -- Macro: nv-present-video enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'num-video-slots-nv'.

 -- Macro: ext-swap-control enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'swap-interval-ext', 'max-swap-interval-ext'.

 -- Macro: ext-swap-control-tear enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'late-swaps-tear-ext'.

 -- Macro: ext-buffer-age enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'back-buffer-age-ext'.

 -- Macro: glx-amd-gpu-association enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'gpu-vendor-amd', 'gpu-renderer-string-amd',
     'gpu-opengl-version-string-amd', 'gpu-fastest-target-gpus-amd',
     'gpu-ram-amd', 'gpu-clock-amd', 'gpu-num-pipes-amd',
     'gpu-num-simd-amd', 'gpu-num-rb-amd', 'gpu-num-spi-amd'.

 -- Macro: glx-arb-create-context-robustness enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'lose-context-on-reset-arb',
     'context-reset-notification-strategy-arb',
     'no-reset-notification-arb'.

 -- Macro: arb-create-context-profile enum
     Enumerated value.  The symbolic ENUM argument is replaced with its
     corresponding numeric value at compile-time.  The symbolic
     arguments known to this enumerated value form are:

     'context-profile-mask-arb'.


File: guile-opengl.info,  Node: Low-Level GLX,  Prev: GLX Enumerations,  Up: GLX

5.3 Low-Level GLX
=================

The functions from this section may be had by loading the module:

     (use-modules (glx low-level)

   This section of the manual was derived from the upstream OpenGL
documentation.  Each function's documentation has its own copyright
statement; for full details, see the upstream documentation.  The
copyright notices and licenses present in this section are as follows.

   Copyright (C) 1991-2006 Silicon Graphics, Inc.  This document is
licensed under the SGI Free Software B License.  For details, see
http://oss.sgi.com/projects/FreeB/ (http://oss.sgi.com/projects/FreeB/).

 -- Function: GLXFBConfig-* glXChooseFBConfig dpy screen attrib_list
          nelements
     Return a list of GLX frame buffer configurations that match the
     specified attributes.

     DPY
          Specifies the connection to the X server.

     SCREEN
          Specifies the screen number.

     ATTRIB_LIST
          Specifies a list of attribute/value pairs.  The last attribute
          must be 'None'.

     NELEMENTS
          Returns the number of elements in the list returned by
          'glXChooseFBConfig'.

     'glXChooseFBConfig' returns GLX frame buffer configurations that
     match the attributes specified in ATTRIB_LIST, or 'NULL' if no
     matches are found.  If ATTRIB_LIST is 'NULL', then
     'glXChooseFBConfig' returns an array of GLX frame buffer
     configurations that are available on the specified screen.  If an
     error occurs, no frame buffer configurations exist on the specified
     screen, or if no frame buffer configurations match the specified
     attributes, then 'NULL' is returned.  Use 'XFree' to free the
     memory returned by 'glXChooseFBConfig'.

     All attributes in ATTRIB_LIST, including boolean attributes, are
     immediately followed by the corresponding desired value.  The list
     is terminated with 'None'.  If an attribute is not specified in
     ATTRIB_LIST, then the default value (see below) is used (and the
     attribute is said to be specified implicitly).  For example, if
     'GLX_STEREO' is not specified, then it is assumed to be 'False'.
     For some attributes, the default is 'GLX_DONT_CARE', meaning that
     any value is OK for this attribute, so the attribute will not be
     checked.

     Attributes are matched in an attribute-specific manner.  Some of
     the attributes, such as 'GLX_LEVEL', must match the specified value
     exactly; others, such as, 'GLX_RED_SIZE' must meet or exceed the
     specified minimum values.  If more than one GLX frame buffer
     configuration is found, then a list of configurations, sorted
     according to the "best" match criteria, is returned.  The match
     criteria for each attribute and the exact sorting order is defined
     below.

     The interpretations of the various GLX visual attributes are as
     follows:

     'GLX_FBCONFIG_ID'

          Must be followed by a valid XID that indicates the desired GLX
          frame buffer configuration.  When a 'GLX_FBCONFIG_ID' is
          specified, all attributes are ignored.  The default value is
          'GLX_DONT_CARE'.

     'GLX_BUFFER_SIZE'

          Must be followed by a nonnegative integer that indicates the
          desired color index buffer size.  The smallest index buffer of
          at least the specified size is preferred.  This attribute is
          ignored if 'GLX_COLOR_INDEX_BIT' is not set in
          'GLX_RENDER_TYPE'.  The default value is 0.

     'GLX_LEVEL'

          Must be followed by an integer buffer-level specification.
          This specification is honored exactly.  Buffer level 0
          corresponds to the default frame buffer of the display.
          Buffer level 1 is the first overlay frame buffer, level two
          the second overlay frame buffer, and so on.  Negative buffer
          levels correspond to underlay frame buffers.  The default
          value is 0.

     'GLX_DOUBLEBUFFER'

          Must be followed by 'True' or 'False'.  If 'True' is
          specified, then only double-buffered frame buffer
          configurations are considered; if 'False' is specified, then
          only single-buffered frame buffer configurations are
          considered.  The default value is 'GLX_DONT_CARE'.

     'GLX_STEREO'

          Must be followed by 'True' or 'False'.  If 'True' is
          specified, then only stereo frame buffer configurations are
          considered; if 'False' is specified, then only monoscopic
          frame buffer configurations are considered.  The default value
          is 'False'.

     'GLX_AUX_BUFFERS'

          Must be followed by a nonnegative integer that indicates the
          desired number of auxiliary buffers.  Configurations with the
          smallest number of auxiliary buffers that meet or exceed the
          specified number are preferred.  The default value is 0.

     'GLX_RED_SIZE', 'GLX_GREEN_SIZE', 'GLX_BLUE_SIZE', 'GLX_ALPHA_SIZE'

          Each attribute, if present, must be followed by a nonnegative
          minimum size specification or 'GLX_DONT_CARE'.  The largest
          available total RGBA color buffer size (sum of 'GLX_RED_SIZE',
          'GLX_GREEN_SIZE', 'GLX_BLUE_SIZE', and 'GLX_ALPHA_SIZE') of at
          least the minimum size specified for each color component is
          preferred.  If the requested number of bits for a color
          component is 0 or 'GLX_DONT_CARE', it is not considered.  The
          default value for each color component is 0.

     'GLX_DEPTH_SIZE'

          Must be followed by a nonnegative minimum size specification.
          If this value is zero, frame buffer configurations with no
          depth buffer are preferred.  Otherwise, the largest available
          depth buffer of at least the minimum size is preferred.  The
          default value is 0.

     'GLX_STENCIL_SIZE'

          Must be followed by a nonnegative integer that indicates the
          desired number of stencil bitplanes.  The smallest stencil
          buffer of at least the specified size is preferred.  If the
          desired value is zero, frame buffer configurations with no
          stencil buffer are preferred.  The default value is 0.

     'GLX_ACCUM_RED_SIZE'

          Must be followed by a nonnegative minimum size specification.
          If this value is zero, frame buffer configurations with no red
          accumulation buffer are preferred.  Otherwise, the largest
          possible red accumulation buffer of at least the minimum size
          is preferred.  The default value is 0.

     'GLX_ACCUM_GREEN_SIZE'

          Must be followed by a nonnegative minimum size specification.
          If this value is zero, frame buffer configurations with no
          green accumulation buffer are preferred.  Otherwise, the
          largest possible green accumulation buffer of at least the
          minimum size is preferred.  The default value is 0.

     'GLX_ACCUM_BLUE_SIZE'

          Must be followed by a nonnegative minimum size specification.
          If this value is zero, frame buffer configurations with no
          blue accumulation buffer are preferred.  Otherwise, the
          largest possible blue accumulation buffer of at least the
          minimum size is preferred.  The default value is 0.

     'GLX_ACCUM_ALPHA_SIZE'

          Must be followed by a nonnegative minimum size specification.
          If this value is zero, frame buffer configurations with no
          alpha accumulation buffer are preferred.  Otherwise, the
          largest possible alpha accumulation buffer of at least the
          minimum size is preferred.  The default value is 0.

     'GLX_RENDER_TYPE'

          Must be followed by a mask indicating which OpenGL rendering
          modes the frame buffer configuration must support.  Valid bits
          are 'GLX_RGBA_BIT' and 'GLX_COLOR_INDEX_BIT'.  If the mask is
          set to 'GLX_RGBA_BIT' | 'GLX_COLOR_INDEX_BIT', then only frame
          buffer configurations that can be bound to both RGBA contexts
          and color index contexts will be considered.  The default
          value is 'GLX_RGBA_BIT'.

     'GLX_DRAWABLE_TYPE'

          Must be followed by a mask indicating which GLX drawable types
          the frame buffer configuration must support.  Valid bits are
          'GLX_WINDOW_BIT', 'GLX_PIXMAP_BIT', and 'GLX_PBUFFER_BIT'.
          For example, if mask is set to 'GLX_WINDOW_BIT' |
          'GLX_PIXMAP_BIT', only frame buffer configurations that
          support both windows and GLX pixmaps will be considered.  The
          default value is 'GLX_WINDOW_BIT'.

     'GLX_X_RENDERABLE'

          Must be followed by 'True' or 'False'.  If 'True' is
          specified, then only frame buffer configurations that have
          associated X visuals (and can be used to render to Windows
          and/or GLX pixmaps) will be considered.  The default value is
          'GLX_DONT_CARE'.

     'GLX_X_VISUAL_TYPE'

          Must be followed by one of 'GLX_TRUE_COLOR',
          'GLX_DIRECT_COLOR', 'GLX_PSEUDO_COLOR', 'GLX_STATIC_COLOR',
          'GLX_GRAY_SCALE', or 'GLX_STATIC_GRAY', indicating the desired
          X visual type.  Not all frame buffer configurations have an
          associated X visual.  If 'GLX_DRAWABLE_TYPE' is specified in
          ATTRIB_LIST and the mask that follows does not have
          'GLX_WINDOW_BIT' set, then this value is ignored.  It is also
          ignored if 'GLX_X_RENDERABLE' is specified as 'False'.  RGBA
          rendering may be supported for visuals of type
          'GLX_TRUE_COLOR', 'GLX_DIRECT_COLOR', 'GLX_PSEUDO_COLOR', or
          'GLX_STATIC_COLOR', but color index rendering is only
          supported for visuals of type 'GLX_PSEUDO_COLOR' or
          'GLX_STATIC_COLOR' (i.e., single-channel visuals).  The tokens
          'GLX_GRAY_SCALE' and 'GLX_STATIC_GRAY' will not match current
          OpenGL enabled visuals, but are included for future use.  The
          default value for 'GLX_X_VISUAL_TYPE' is 'GLX_DONT_CARE'.

     'GLX_CONFIG_CAVEAT'

          Must be followed by one of 'GLX_NONE', 'GLX_SLOW_CONFIG',
          'GLX_NON_CONFORMANT_CONFIG'.  If 'GLX_NONE' is specified, then
          only frame buffer configurations with no caveats will be
          considered; if 'GLX_SLOW_CONFIG' is specified, then only slow
          frame buffer configurations will be considered; if
          'GLX_NON_CONFORMANT_CONFIG' is specified, then only
          nonconformant frame buffer configurations will be considered.
          The default value is 'GLX_DONT_CARE'.

     'GLX_TRANSPARENT_TYPE'

          Must be followed by one of 'GLX_NONE', 'GLX_TRANSPARENT_RGB',
          'GLX_TRANSPARENT_INDEX'.  If 'GLX_NONE' is specified, then
          only opaque frame buffer configurations will be considered; if
          'GLX_TRANSPARENT_RGB' is specified, then only transparent
          frame buffer configurations that support RGBA rendering will
          be considered; if 'GLX_TRANSPARENT_INDEX' is specified, then
          only transparent frame buffer configurations that support
          color index rendering will be considered.  The default value
          is 'GLX_NONE'.

     'GLX_TRANSPARENT_INDEX_VALUE'

          Must be followed by an integer value indicating the
          transparent index value; the value must be between 0 and the
          maximum frame buffer value for indices.  Only frame buffer
          configurations that use the specified transparent index value
          will be considered.  The default value is 'GLX_DONT_CARE'.
          This attribute is ignored unless 'GLX_TRANSPARENT_TYPE' is
          included in ATTRIB_LIST and specified as
          'GLX_TRANSPARENT_INDEX'.

     'GLX_TRANSPARENT_RED_VALUE'

          Must be followed by an integer value indicating the
          transparent red value; the value must be between 0 and the
          maximum frame buffer value for red.  Only frame buffer
          configurations that use the specified transparent red value
          will be considered.  The default value is 'GLX_DONT_CARE'.
          This attribute is ignored unless 'GLX_TRANSPARENT_TYPE' is
          included in ATTRIB_LIST and specified as
          'GLX_TRANSPARENT_RGB'.

     'GLX_TRANSPARENT_GREEN_VALUE'

          Must be followed by an integer value indicating the
          transparent green value; the value must be between 0 and the
          maximum frame buffer value for green.  Only frame buffer
          configurations that use the specified transparent green value
          will be considered.  The default value is 'GLX_DONT_CARE'.
          This attribute is ignored unless 'GLX_TRANSPARENT_TYPE' is
          included in ATTRIB_LIST and specified as
          'GLX_TRANSPARENT_RGB'.

     'GLX_TRANSPARENT_BLUE_VALUE'

          Must be followed by an integer value indicating the
          transparent blue value; the value must be between 0 and the
          maximum frame buffer value for blue.  Only frame buffer
          configurations that use the specified transparent blue value
          will be considered.  The default value is 'GLX_DONT_CARE'.
          This attribute is ignored unless 'GLX_TRANSPARENT_TYPE' is
          included in ATTRIB_LIST and specified as
          'GLX_TRANSPARENT_RGB'.

     'GLX_TRANSPARENT_ALPHA_VALUE'

          Must be followed by an integer value indicating the
          transparent alpha value; the value must be between 0 and the
          maximum frame buffer value for alpha.  Only frame buffer
          configurations that use the specified transparent alpha value
          will be considered.  The default value is 'GLX_DONT_CARE'.

     When more than one GLX frame buffer configuration matches the
     specified attributes, a list of matching configurations is
     returned.  The list is sorted according to the following precedence
     rules, which are applied in ascending order (i.e., configurations
     that are considered equal by a lower numbered rule are sorted by
     the higher numbered rule):

     1.
          By 'GLX_CONFIG_CAVEAT' where the precedence is 'GLX_NONE',
          'GLX_SLOW_CONFIG', and 'GLX_NON_CONFORMANT_CONFIG'.

     2.
          Larger total number of RGBA color components ('GLX_RED_SIZE',
          'GLX_GREEN_SIZE', 'GLX_BLUE_SIZE', plus 'GLX_ALPHA_SIZE') that
          have higher number of bits.  If the requested number of bits
          in ATTRIB_LIST is zero or 'GLX_DONT_CARE' for a particular
          color component, then the number of bits for that component is
          not considered.

     3.
          Smaller 'GLX_BUFFER_SIZE'.

     4.
          Single buffered configuration ('GLX_DOUBLEBUFFER' being
          'False' precedes a double buffered one.

     5.
          Smaller 'GLX_AUX_BUFFERS'.

     6.
          Larger 'GLX_DEPTH_SIZE'.

     7.
          Smaller 'GLX_STENCIL_SIZE'.

     8.
          Larger total number of accumulation buffer color components
          ('GLX_ACCUM_RED_SIZE', 'GLX_ACCUM_GREEN_SIZE',
          'GLX_ACCUM_BLUE_SIZE', plus 'GLX_ACCUM_ALPHA_SIZE') that have
          higher number of bits.  If the requested number of bits in
          ATTRIB_LIST is zero or 'GLX_DONT_CARE' for a particular color
          component, then the number of bits for that component is not
          considered.

     9.
          By 'GLX_X_VISUAL_TYPE' where the precedence order is
          'GLX_TRUE_COLOR', 'GLX_DIRECT_COLOR', 'GLX_PSEUDO_COLOR',
          'GLX_STATIC_COLOR', 'GLX_GRAY_SCALE', 'GLX_STATIC_GRAY'.

     'NULL' is returned if an undefined GLX attribute is encountered in
     ATTRIB_LIST, if SCREEN is invalid, or if DPY does not support the
     GLX extension.

 -- Function: XVisualInfo* glXChooseVisual dpy screen attribList
     Return a visual that matches specified attributes.

     DPY
          Specifies the connection to the X server.

     SCREEN
          Specifies the screen number.

     ATTRIBLIST
          Specifies a list of boolean attributes and integer
          attribute/value pairs.  The last attribute must be 'None'.

     'glXChooseVisual' returns a pointer to an XVisualInfo structure
     describing the visual that best meets a minimum specification.  The
     boolean GLX attributes of the visual that is returned will match
     the specified values, and the integer GLX attributes will meet or
     exceed the specified minimum values.  If all other attributes are
     equivalent, then TrueColor and PseudoColor visuals have priority
     over DirectColor and StaticColor visuals, respectively.  If no
     conforming visual exists, 'NULL' is returned.  To free the data
     returned by this function, use 'XFree'.

     All boolean GLX attributes default to 'False' except 'GLX_USE_GL',
     which defaults to 'True'.  All integer GLX attributes default to
     zero.  Default specifications are superseded by attributes included
     in ATTRIBLIST.  Boolean attributes included in ATTRIBLIST are
     understood to be 'True'.  Integer attributes and enumerated type
     attributes are followed immediately by the corresponding desired or
     minimum value.  The list must be terminated with 'None'.

     The interpretations of the various GLX visual attributes are as
     follows:

     'GLX_USE_GL'
          Ignored.  Only visuals that can be rendered with GLX are
          considered.

     'GLX_BUFFER_SIZE'
          Must be followed by a nonnegative integer that indicates the
          desired color index buffer size.  The smallest index buffer of
          at least the specified size is preferred.  Ignored if
          'GLX_RGBA' is asserted.

     'GLX_LEVEL'
          Must be followed by an integer buffer-level specification.
          This specification is honored exactly.  Buffer level zero
          corresponds to the main frame buffer of the display.  Buffer
          level one is the first overlay frame buffer, level two the
          second overlay frame buffer, and so on.  Negative buffer
          levels correspond to underlay frame buffers.

     'GLX_RGBA'
          If present, only TrueColor and DirectColor visuals are
          considered.  Otherwise, only PseudoColor and StaticColor
          visuals are considered.

     'GLX_DOUBLEBUFFER'
          If present, only double-buffered visuals are considered.
          Otherwise, only single-buffered visuals are considered.

     'GLX_STEREO'
          If present, only stereo visuals are considered.  Otherwise,
          only monoscopic visuals are considered.

     'GLX_AUX_BUFFERS'
          Must be followed by a nonnegative integer that indicates the
          desired number of auxiliary buffers.  Visuals with the
          smallest number of auxiliary buffers that meets or exceeds the
          specified number are preferred.

     'GLX_RED_SIZE'
          Must be followed by a nonnegative minimum size specification.
          If this value is zero, the smallest available red buffer is
          preferred.  Otherwise, the largest available red buffer of at
          least the minimum size is preferred.

     'GLX_GREEN_SIZE'
          Must be followed by a nonnegative minimum size specification.
          If this value is zero, the smallest available green buffer is
          preferred.  Otherwise, the largest available green buffer of
          at least the minimum size is preferred.

     'GLX_BLUE_SIZE'
          Must be followed by a nonnegative minimum size specification.
          If this value is zero, the smallest available blue buffer is
          preferred.  Otherwise, the largest available blue buffer of at
          least the minimum size is preferred.

     'GLX_ALPHA_SIZE'
          Must be followed by a nonnegative minimum size specification.
          If this value is zero, the smallest available alpha buffer is
          preferred.  Otherwise, the largest available alpha buffer of
          at least the minimum size is preferred.

     'GLX_DEPTH_SIZE'
          Must be followed by a nonnegative minimum size specification.
          If this value is zero, visuals with no depth buffer are
          preferred.  Otherwise, the largest available depth buffer of
          at least the minimum size is preferred.

     'GLX_STENCIL_SIZE'
          Must be followed by a nonnegative integer that indicates the
          desired number of stencil bitplanes.  The smallest stencil
          buffer of at least the specified size is preferred.  If the
          desired value is zero, visuals with no stencil buffer are
          preferred.

     'GLX_ACCUM_RED_SIZE'
          Must be followed by a nonnegative minimum size specification.
          If this value is zero, visuals with no red accumulation buffer
          are preferred.  Otherwise, the largest possible red
          accumulation buffer of at least the minimum size is preferred.

     'GLX_ACCUM_GREEN_SIZE'
          Must be followed by a nonnegative minimum size specification.
          If this value is zero, visuals with no green accumulation
          buffer are preferred.  Otherwise, the largest possible green
          accumulation buffer of at least the minimum size is preferred.

     'GLX_ACCUM_BLUE_SIZE'
          Must be followed by a nonnegative minimum size specification.
          If this value is zero, visuals with no blue accumulation
          buffer are preferred.  Otherwise, the largest possible blue
          accumulation buffer of at least the minimum size is preferred.

     'GLX_ACCUM_ALPHA_SIZE'
          Must be followed by a nonnegative minimum size specification.
          If this value is zero, visuals with no alpha accumulation
          buffer are preferred.  Otherwise, the largest possible alpha
          accumulation buffer of at least the minimum size is preferred.

     'NULL' is returned if an undefined GLX attribute is encountered in
     ATTRIBLIST.

 -- Function: void glXCopyContext dpy src dst mask
     Copy state from one rendering context to another.

     DPY
          Specifies the connection to the X server.

     SRC
          Specifies the source context.

     DST
          Specifies the destination context.

     MASK
          Specifies which portions of SRC state are to be copied to DST.

     'glXCopyContext' copies selected groups of state variables from SRC
     to DST.  MASK indicates which groups of state variables are to be
     copied.  MASK contains the bitwise OR of the same symbolic names
     that are passed to the GL command 'glPushAttrib'.  The single
     symbolic constant 'GLX_ALL_ATTRIB_BITS' can be used to copy the
     maximum possible portion of rendering state.

     The copy can be done only if the renderers named by SRC and DST
     share an address space.  Two rendering contexts share an address
     space if both are nondirect using the same server, or if both are
     direct and owned by a single process.  Note that in the nondirect
     case it is not necessary for the calling threads to share an
     address space, only for their related rendering contexts to share
     an address space.

     Not all values for GL state can be copied.  For example, pixel pack
     and unpack state, render mode state, and select and feedback state
     are not copied.  The state that can be copied is exactly the state
     that is manipulated by the GL command 'glPushAttrib'.

     An implicit 'glFlush' is done by 'glXCopyContext' if SRC is the
     current context for the calling thread.

     'BadMatch' is generated if rendering contexts SRC and DST do not
     share an address space or were not created with respect to the same
     screen.

     'BadAccess' is generated if DST is current to any thread (including
     the calling thread) at the time 'glXCopyContext' is called.

     'GLXBadCurrentWindow' is generated if SRC is the current context
     and the current drawable is a window that is no longer valid.

     'GLXBadContext' is generated if either SRC or DST is not a valid
     GLX context.

 -- Function: GLXContext glXCreateContext dpy vis shareList direct
     Create a new GLX rendering context.

     DPY
          Specifies the connection to the X server.

     VIS
          Specifies the visual that defines the frame buffer resources
          available to the rendering context.  It is a pointer to an
          'XVisualInfo' structure, not a visual ID or a pointer to a
          'Visual'.

     SHARELIST
          Specifies the context with which to share display lists.
          'NULL' indicates that no sharing is to take place.

     DIRECT
          Specifies whether rendering is to be done with a direct
          connection to the graphics system if possible ('True') or
          through the X server ('False').

     'glXCreateContext' creates a GLX rendering context and returns its
     handle.  This context can be used to render into both windows and
     GLX pixmaps.  If 'glXCreateContext' fails to create a rendering
     context, 'NULL' is returned.

     If DIRECT is 'True', then a direct rendering context is created if
     the implementation supports direct rendering, if the connection is
     to an X server that is local, and if a direct rendering context is
     available.  (An implementation may return an indirect context when
     DIRECT is 'True'.)  If DIRECT is 'False', then a rendering context
     that renders through the X server is always created.  Direct
     rendering provides a performance advantage in some implementations.
     However, direct rendering contexts cannot be shared outside a
     single process, and they may be unable to render to GLX pixmaps.

     If SHARELIST is not 'NULL', then all display-list indexes and
     definitions are shared by context SHARELIST and by the newly
     created context.  An arbitrary number of contexts can share a
     single display-list space.  However, all rendering contexts that
     share a single display-list space must themselves exist in the same
     address space.  Two rendering contexts share an address space if
     both are nondirect using the same server, or if both are direct and
     owned by a single process.  Note that in the nondirect case, it is
     not necessary for the calling threads to share an address space,
     only for their related rendering contexts to share an address
     space.

     If the GL version is 1.1 or greater, then all texture objects
     except object 0 are shared by any contexts that share display
     lists.

     'NULL' is returned if execution fails on the client side.

     'BadMatch' is generated if the context to be created would not
     share the address space or the screen of the context specified by
     SHARELIST.

     'BadValue' is generated if VIS is not a valid visual (for example,
     if a particular GLX implementation does not support it).

     'GLXBadContext' is generated if SHARELIST is not a GLX context and
     is not 'NULL'.

     'BadAlloc' is generated if the server does not have enough
     resources to allocate the new context.

 -- Function: GLXPixmap glXCreateGLXPixmap dpy vis pixmap
     Create an off-screen GLX rendering area.

     DPY
          Specifies the connection to the X server.

     VIS
          Specifies the visual that defines the structure of the
          rendering area.  It is a pointer to an 'XVisualInfo'
          structure, not a visual ID or a pointer to a 'Visual'.

     PIXMAP
          Specifies the X pixmap that will be used as the front left
          color buffer of the off-screen rendering area.

     'glXCreateGLXPixmap' creates an off-screen rendering area and
     returns its XID. Any GLX rendering context that was created with
     respect to VIS can be used to render into this off-screen area.
     Use 'glXMakeCurrent' to associate the rendering area with a GLX
     rendering context.

     The X pixmap identified by PIXMAP is used as the front left buffer
     of the resulting off-screen rendering area.  All other buffers
     specified by VIS, including color buffers other than the front left
     buffer, are created without externally visible names.  GLX pixmaps
     with double-buffering are supported.  However, 'glXSwapBuffers' is
     ignored by these pixmaps.

     Some implementations may not support GLX pixmaps with direct
     rendering contexts.

     'BadMatch' is generated if the depth of PIXMAP does not match the
     depth value reported by core X11 for VIS, or if PIXMAP was not
     created with respect to the same screen as VIS.

     'BadValue' is generated if VIS is not a valid XVisualInfo pointer
     (for example, if a particular GLX implementation does not support
     this visual).

     'BadPixmap' is generated if PIXMAP is not a valid pixmap.

     'BadAlloc' is generated if the server cannot allocate the GLX
     pixmap.

 -- Function: GLXContext glXCreateNewContext dpy config render_type
          share_list direct
     Create a new GLX rendering context.

     DPY
          Specifies the connection to the X server.

     CONFIG
          Specifies the GLXFBConfig structure with the desired
          attributes for the context.

     RENDER_TYPE
          Specifies the type of the context to be created.  Must be one
          of 'GLX_RGBA_TYPE' or 'GLX_COLOR_INDEX_TYPE'.

     SHARE_LIST
          Specifies the context with which to share display lists.
          'NULL' indicates that no sharing is to take place.

     SHARE_LIST
          Specifies whether rendering is to be done with a direct
          connection to the graphics system if possible ('True') or
          through the X server ('False').

     'glXCreateNewContext' creates a GLX rendering context and returns
     its handle.  This context can be used to render into GLX windows,
     pixmaps, or pixel buffers.  If 'glXCreateNewContext' fails to
     create a rendering context, 'NULL' is returned.

     If RENDER_TYPE is 'GLX_RGBA_TYPE', then a context that supports
     RGBA rendering is created.  If CONFIG is 'GLX_COLOR_INDEX_TYPE',
     then context supporting color-index rendering is created.

     If RENDER_TYPE is not 'NULL', then all display-list indexes and
     definitions are shared by context RENDER_TYPE and by the newly
     created context.  An arbitrary number of contexts can share a
     single display-list space.  However, all rendering contexts that
     share a single display-list space must themselves exist in the same
     address space.  Two rendering contexts share an address space if
     both are nondirect using the same server, or if both are direct and
     owned by a single process.  Note that in the nondirect case, it is
     not necessary for the calling threads to share an address space,
     only for their related rendering contexts to share an address
     space.

     If SHARE_LIST is 'True', then a direct-rendering context is created
     if the implementation supports direct rendering, if the connection
     is to an X server that is local, and if a direct-rendering context
     is available.  (An implementation may return an indirect context
     when SHARE_LIST is 'True'.)  If SHARE_LIST is 'False', then a
     rendering context that renders through the X server is always
     created.  Direct rendering provides a performance advantage in some
     implementations.  However, direct-rendering contexts cannot be
     shared outside a single process, and they may be unable to render
     to GLX pixmaps.

     'NULL' is returned if execution fails on the client side.

     'GLXBadContext' is generated if RENDER_TYPE is not a GLX context
     and is not 'NULL'.

     'GLXBadFBConfig' is generated if CONFIG is not a valid GLXFBConfig.

     'BadMatch' is generated if the context to be created would not
     share the address space or the screen of the context specified by
     RENDER_TYPE.

     'BadAlloc' is generated if the server does not have enough
     resources to allocate the new context.

     'BadValue' is generated if CONFIG is not a valid visual (for
     example, if a particular GLX implementation does not support it).

 -- Function: GLXPbuffer glXCreatePbuffer dpy config attrib_list
     Create an off-screen rendering area.

     DPY
          Specifies the connection to the X server.

     CONFIG
          Specifies a GLXFBConfig structure with the desired attributes
          for the window.

     ATTRIB_LIST
          Specifies a list of attribute value pairs, which must be
          terminated with 'None' or 'NULL'.  Accepted attributes are
          'GLX_PBUFFER_WIDTH', 'GLX_PBUFFER_HEIGHT',
          'GLX_PRESERVED_CONTENTS', and 'GLX_LARGEST_PBUFFER'.

     'glXCreatePbuffer' creates an off-screen rendering area and returns
     its XID. Any GLX rendering context that was created with respect to
     CONFIG can be used to render into this window.  Use
     'glXMakeContextCurrent' to associate the rendering area with a GLX
     rendering context.

     The accepted attributes for a GLXPbuffer are:

     'GLX_PBUFFER_WIDTH'
          Specify the pixel width of the requested GLXPbuffer.  The
          default value is 0.

     'GLX_PBUFFER_HEIGHT'
          Specify the pixel height of the requested GLXPbuffer.  The
          default value is 0.

     'GLX_LARGEST_PBUFFER'
          Specify to obtain the largest available pixel buffer, if the
          requested allocation would have failed.  The width and height
          of the allocated pixel buffer will never exceed the specified
          'GLX_PBUFFER_WIDTH' or 'GLX_PBUFFER_HEIGHT', respectively.
          Use 'glXQueryDrawable' to retrieve the dimensions of the
          allocated pixel buffer.  The default value is 'False'.

     'GLX_PRESERVED_CONTENTS'
          Specify if the contents of the pixel buffer should be
          preserved when a resource conflict occurs.  If set to 'False',
          the contents of the pixel buffer may be lost at any time.  If
          set to 'True', or not specified in ATTRIB_LIST, then the
          contents of the pixel buffer will be preserved (most likely by
          copying the contents into main system memory from the frame
          buffer).  In either case, the client can register (using
          'glXSelectEvent', to receive pixel buffer clobber events that
          are generated when the pbuffer contents have been preserved or
          damaged.

     GLXPbuffers contain the color and ancillary buffers specified by
     CONFIG.  It is possible to create a pixel buffer with back buffers
     and to swap those buffers using 'glXSwapBuffers'.

     'BadAlloc' is generated if there are insufficient resources to
     allocate the requested GLXPbuffer.

     'GLXBadFBConfig' is generated if CONFIG is not a valid GLXFBConfig.

     'BadMatch' is generated if CONFIG does not support rendering to
     pixel buffers (e.g., 'GLX_DRAWABLE_TYPE' does not contain
     'GLX_PBUFFER_BIT').

 -- Function: GLXPixmap glXCreatePixmap dpy config pixmap attrib_list
     Create an off-screen rendering area.

     DPY
          Specifies the connection to the X server.

     CONFIG
          Specifies a GLXFBConfig structure with the desired attributes
          for the window.

     PIXMAP
          Specifies the X pixmap to be used as the rendering area.

     ATTRIB_LIST
          Currently unused.  This must be set to 'NULL' or be an empty
          list (i.e., one in which the first element is 'None').

     'glXCreatePixmap' creates an off-screen rendering area and returns
     its XID. Any GLX rendering context that was created with respect to
     CONFIG can be used to render into this window.  Use
     'glXMakeCurrent' to associate the rendering area with a GLX
     rendering context.

     'BadMatch' is generated if PIXMAP was not created with a visual
     that corresponds to CONFIG.

     'BadMatch' is generated if CONFIG does not support rendering to
     windows (e.g., 'GLX_DRAWABLE_TYPE' does not contain
     'GLX_WINDOW_BIT').

     'BadWindow' is generated if PIXMAP is not a valid window XID.
     'BadAlloc' is generated if there is already a GLXFBConfig
     associated with PIXMAP.

     'BadAlloc' is generated if the X server cannot allocate a new GLX
     window.

     'GLXBadFBConfig' is generated if CONFIG is not a valid GLXFBConfig.

 -- Function: GLXWindow glXCreateWindow dpy config win attrib_list
     Create an on-screen rendering area.

     DPY
          Specifies the connection to the X server.

     CONFIG
          Specifies a GLXFBConfig structure with the desired attributes
          for the window.

     WIN
          Specifies the X window to be used as the rendering area.

     ATTRIB_LIST
          Currently unused.  This must be set to 'NULL' or be an empty
          list (i.e., one in which the first element is 'None').

     'glXCreateWindow' creates an on-screen rendering area from an
     existing X window that was created with a visual matching CONFIG.
     The XID of the GLXWindow is returned.  Any GLX rendering context
     that was created with respect to CONFIG can be used to render into
     this window.  Use 'glXMakeContextCurrent' to associate the
     rendering area with a GLX rendering context.

     'BadMatch' is generated if WIN was not created with a visual that
     corresponds to CONFIG.

     'BadMatch' is generated if CONFIG does not support rendering to
     windows (i.e., 'GLX_DRAWABLE_TYPE' does not contain
     'GLX_WINDOW_BIT').

     'BadWindow' is generated if WIN is not a valid pixmap XID.

     'BadAlloc' is generated if there is already a GLXFBConfig
     associated with WIN.

     'BadAlloc' is generated if the X server cannot allocate a new GLX
     window.

     'GLXBadFBConfig' is generated if CONFIG is not a valid GLXFBConfig.

 -- Function: void glXDestroyContext dpy ctx
     Destroy a GLX context.

     DPY
          Specifies the connection to the X server.

     CTX
          Specifies the GLX context to be destroyed.

     If the GLX rendering context CTX is not current to any thread,
     'glXDestroyContext' destroys it immediately.  Otherwise, CTX is
     destroyed when it becomes not current to any thread.  In either
     case, the resource ID referenced by CTX is freed immediately.

     'GLXBadContext' is generated if CTX is not a valid GLX context.

 -- Function: void glXDestroyGLXPixmap dpy pix
     Destroy a GLX pixmap.

     DPY
          Specifies the connection to the X server.

     PIX
          Specifies the GLX pixmap to be destroyed.

     If the GLX pixmap PIX is not current to any client,
     'glXDestroyGLXPixmap' destroys it immediately.  Otherwise, PIX is
     destroyed when it becomes not current to any client.  In either
     case, the resource ID is freed immediately.

     'GLXBadPixmap' is generated if PIX is not a valid GLX pixmap.

 -- Function: void glXDestroyPbuffer dpy pbuf
     Destroy an off-screen rendering area.

     DPY
          Specifies the connection to the X server.

     PBUF
          Specifies the GLXPbuffer to be destroyed.

     'glXDestroyPbuffer' destroys a GLXPbuffer created by
     'glXCreatePbuffer'.

     'GLXBadPbuffer' is generated if PBUF is not a valid GLXPbuffer.

 -- Function: void glXDestroyPixmap dpy pixmap
     Destroy an off-screen rendering area.

     DPY
          Specifies the connection to the X server.

     PIXMAP
          Specifies the GLXPixmap to be destroyed.

     'glXDestroyPixmap' destroys a GLXPixmap created by
     'glXCreatePixmap'.

     'GLXBadPixmap' is generated if PIXMAP is not a valid GLXPixmap.

 -- Function: void glXDestroyWindow dpy win
     Destroy an on-screen rendering area.

     DPY
          Specifies the connection to the X server.

     WIN
          Specifies the GLXWindow to be destroyed.

     'glXDestroyWindow' destroys a GLXWindow created by
     'glXCreateWindow'.

     'GLXBadWindow' is generated if WIN is not a valid GLXPixmap.

 -- Function: void glXFreeContextEXT dpy ctx
     Free client-side memory for imported context.

     DPY
          Specifies the connection to the X server.

     CTX
          Specifies a GLX rendering context.

     'glXFreeContextEXT' frees the client-side part of a GLXContext that
     was created with 'glXImportContextEXT'.  'glXFreeContextEXT' does
     not free the server-side context information or the XID associated
     with the server-side context.

     'glXFreeContextEXT' is part of the 'EXT_import_context' extension,
     not part of the core GLX command set.  If
     _glxextstring(EXT_import_context) is included in the string
     returned by 'glXQueryExtensionsString', when called with argument
     'GLX_EXTENSIONS', extension 'EXT_vertex_array' is supported.

     'GLXBadContext' is generated if CTX does not refer to a valid
     context.

 -- Function: const-char-* glXGetClientString dpy name
     Return a string describing the client.

     DPY
          Specifies the connection to the X server.

     NAME
          Specifies which string is returned.  The symbolic constants
          'GLX_VENDOR', 'GLX_VERSION', and 'GLX_EXTENSIONS' are
          accepted.

     'glXGetClientString' returns a string describing some aspect of the
     client library.  The possible values for NAME are 'GLX_VENDOR',
     'GLX_VERSION', and 'GLX_EXTENSIONS'.  If NAME is not set to one of
     these values, 'glXGetClientString' returns 'NULL'.  The format and
     contents of the vendor string is implementation dependent.

     The extensions string is null-terminated and contains a
     space-separated list of extension names.  (The extension names
     never contain spaces.)  If there are no extensions to GLX, then the
     empty string is returned.

     The version string is laid out as follows:

     <major_version.minor_version><space><vendor-specific info>

     Both the major and minor portions of the version number are of
     arbitrary length.  The vendor-specific information is optional.
     However, if it is present, the format and contents are
     implementation specific.

 -- Function: int glXGetConfig dpy vis attrib value
     Return information about GLX visuals.

     DPY
          Specifies the connection to the X server.

     VIS
          Specifies the visual to be queried.  It is a pointer to an
          'XVisualInfo' structure, not a visual ID or a pointer to a
          'Visual'.

     ATTRIB
          Specifies the visual attribute to be returned.

     VALUE
          Returns the requested value.

     'glXGetConfig' sets VALUE to the ATTRIB value of windows or GLX
     pixmaps created with respect to VIS.  'glXGetConfig' returns an
     error code if it fails for any reason.  Otherwise, zero is
     returned.

     ATTRIB is one of the following:

     'GLX_USE_GL'
          'True' if OpenGL rendering is supported by this visual,
          'False' otherwise.

     'GLX_BUFFER_SIZE'
          Number of bits per color buffer.  For RGBA visuals,
          'GLX_BUFFER_SIZE' is the sum of 'GLX_RED_SIZE',
          'GLX_GREEN_SIZE', 'GLX_BLUE_SIZE', and 'GLX_ALPHA_SIZE'.  For
          color index visuals, 'GLX_BUFFER_SIZE' is the size of the
          color indexes.

     'GLX_LEVEL'
          Frame buffer level of the visual.  Level zero is the default
          frame buffer.  Positive levels correspond to frame buffers
          that overlay the default buffer, and negative levels
          correspond to frame buffers that underlay the default buffer.

     'GLX_RGBA'
          'True' if color buffers store red, green, blue, and alpha
          values.  'False' if they store color indexes.

     'GLX_DOUBLEBUFFER'
          'True' if color buffers exist in front/back pairs that can be
          swapped, 'False' otherwise.

     'GLX_STEREO'
          'True' if color buffers exist in left/right pairs, 'False'
          otherwise.

     'GLX_AUX_BUFFERS'
          Number of auxiliary color buffers that are available.  Zero
          indicates that no auxiliary color buffers exist.

     'GLX_RED_SIZE'
          Number of bits of red stored in each color buffer.  Undefined
          if 'GLX_RGBA' is 'False'.

     'GLX_GREEN_SIZE'
          Number of bits of green stored in each color buffer.
          Undefined if 'GLX_RGBA' is 'False'.

     'GLX_BLUE_SIZE'
          Number of bits of blue stored in each color buffer.  Undefined
          if 'GLX_RGBA' is 'False'.

     'GLX_ALPHA_SIZE'
          Number of bits of alpha stored in each color buffer.
          Undefined if 'GLX_RGBA' is 'False'.

     'GLX_DEPTH_SIZE'
          Number of bits in the depth buffer.

     'GLX_STENCIL_SIZE'
          Number of bits in the stencil buffer.

     'GLX_ACCUM_RED_SIZE'
          Number of bits of red stored in the accumulation buffer.

     'GLX_ACCUM_GREEN_SIZE'
          Number of bits of green stored in the accumulation buffer.

     'GLX_ACCUM_BLUE_SIZE'
          Number of bits of blue stored in the accumulation buffer.

     'GLX_ACCUM_ALPHA_SIZE'
          Number of bits of alpha stored in the accumulation buffer.

     The X protocol allows a single visual ID to be instantiated with
     different numbers of bits per pixel.  Windows or GLX pixmaps that
     will be rendered with OpenGL, however, must be instantiated with a
     color buffer depth of 'GLX_BUFFER_SIZE'.

     Although a GLX implementation can export many visuals that support
     GL rendering, it must support at least one RGBA visual.  This
     visual must have at least one color buffer, a stencil buffer of at
     least 1 bit, a depth buffer of at least 12 bits, and an
     accumulation buffer.  Alpha bitplanes are optional in this visual.
     However, its color buffer size must be as great as that of the
     deepest 'TrueColor', 'DirectColor', 'PseudoColor', or 'StaticColor'
     visual supported on level zero, and it must itself be made
     available on level zero.

     In addition, if the X server exports a 'PseudoColor' or
     'StaticColor' visual on framebuffer level 0, a color index visual
     is also required on that level.  It must have at least one color
     buffer, a stencil buffer of at least 1 bit, and a depth buffer of
     at least 12 bits.  This visual must have as many color bitplanes as
     the deepest 'PseudoColor' or 'StaticColor' visual supported on
     level 0.

     Applications are best written to select the visual that most
     closely meets their requirements.  Creating windows or GLX pixmaps
     with unnecessary buffers can result in reduced rendering
     performance as well as poor resource allocation.

     'GLX_NO_EXTENSION' is returned if DPY does not support the GLX
     extension.

     'GLX_BAD_SCREEN' is returned if the screen of VIS does not
     correspond to a screen.

     'GLX_BAD_ATTRIBUTE' is returned if ATTRIB is not a valid GLX
     attribute.

     'GLX_BAD_VISUAL' is returned if VIS doesn't support GLX and an
     attribute other than 'GLX_USE_GL' is requested.

 -- Function: GLXContextID glXGetContextIDEXT ctx
     Get the XID for a context..

     CTX
          Specifies a GLX rendering context.

     'glXGetContextIDEXT' returns the XID associated with a GLXContext.

     No round trip is forced to the server; unlike most X calls that
     return a value, 'glXGetContextIDEXT' does not flush any pending
     events.

     'glXGetContextIDEXT' is part of the 'EXT_import_context' extension,
     not part of the core GLX command set.  If
     _glxextstring(EXT_import_context) is included in the string
     returned by 'glXQueryExtensionsString', when called with argument
     'GLX_EXTENSIONS', extension 'EXT_import_context' is supported.

     'GLXBadContext' is generated if CTX does not refer to a valid
     context.

 -- Function: GLXContext glXGetCurrentContext
     Return the current context.

     'glXGetCurrentContext' returns the current context, as specified by
     'glXMakeCurrent'.  If there is no current context, 'NULL' is
     returned.

     'glXGetCurrentContext' returns client-side information.  It does
     not make a round trip to the server.

 -- Function: Display-* glXGetCurrentDisplay
     Get display for current context.

     'glXGetCurrentDisplay' returns the display for the current context.
     If no context is current, 'NULL' is returned.

     'glXGetCurrentDisplay' returns client-side information.  It does
     not make a round-trip to the server, and therefore does not flush
     any pending events.

 -- Function: GLXDrawable glXGetCurrentDrawable
     Return the current drawable.

     'glXGetCurrentDrawable' returns the current drawable, as specified
     by 'glXMakeCurrent'.  If there is no current drawable, 'None' is
     returned.

     'glXGetCurrentDrawable' returns client-side information.  It does
     not make a round trip to the server.

 -- Function: GLXDrawable glXGetCurrentReadDrawable
     Return the current drawable.

     'glXGetCurrentReadDrawable' returns the current read drawable, as
     specified by 'read' parameter of 'glXMakeContextCurrent'.  If there
     is no current drawable, 'None' is returned.

     'glXGetCurrentReadDrawable' returns client-side information.  It
     does not make a round-trip to the server.

 -- Function: int glXGetFBConfigAttrib dpy config attribute value
     Return information about a GLX frame buffer configuration.

     DPY
          Specifies the connection to the X server.

     CONFIG
          Specifies the GLX frame buffer configuration to be queried.

     ATTRIBUTE
          Specifies the attribute to be returned.

     VALUE
          Returns the requested value.

     'glXGetFBConfigAttrib' sets VALUE to the ATTRIBUTE value of GLX
     drawables created with respect to CONFIG.  'glXGetFBConfigAttrib'
     returns an error code if it fails for any reason.  Otherwise,
     'Success' is returned.

     ATTRIBUTE is one of the following:

     'GLX_FBCONFIG_ID'
          XID of the given GLXFBConfig.

     'GLX_BUFFER_SIZE'

          Number of bits per color buffer.  If the frame buffer
          configuration supports RGBA contexts, then 'GLX_BUFFER_SIZE'
          is the sum of 'GLX_RED_SIZE', 'GLX_GREEN_SIZE',
          'GLX_BLUE_SIZE', and 'GLX_ALPHA_SIZE'.  If the frame buffer
          configuration supports only color index contexts,
          'GLX_BUFFER_SIZE' is the size of the color indexes.

     'GLX_LEVEL'

          Frame buffer level of the configuration.  Level zero is the
          default frame buffer.  Positive levels correspond to frame
          buffers that overlay the default buffer, and negative levels
          correspond to frame buffers that underlie the default buffer.

     'GLX_DOUBLEBUFFER'

          'True' if color buffers exist in front/back pairs that can be
          swapped, 'False' otherwise.

     'GLX_STEREO'

          'True' if color buffers exist in left/right pairs, 'False'
          otherwise.

     'GLX_AUX_BUFFERS'

          Number of auxiliary color buffers that are available.  Zero
          indicates that no auxiliary color buffers exist.

     'GLX_RED_SIZE'

          Number of bits of red stored in each color buffer.  Undefined
          if RGBA contexts are not supported by the frame buffer
          configuration.

     'GLX_GREEN_SIZE'

          Number of bits of green stored in each color buffer.
          Undefined if RGBA contexts are not supported by the frame
          buffer configuration.

     'GLX_BLUE_SIZE'

          Number of bits of blue stored in each color buffer.  Undefined
          if RGBA contexts are not supported by the frame buffer
          configuration.

     'GLX_ALPHA_SIZE'

          Number of bits of alpha stored in each color buffer.
          Undefined if RGBA contexts are not supported by the frame
          buffer configuration.

     'GLX_DEPTH_SIZE'

          Number of bits in the depth buffer.

     'GLX_STENCIL_SIZE'

          Number of bits in the stencil buffer.

     'GLX_ACCUM_RED_SIZE'

          Number of bits of red stored in the accumulation buffer.

     'GLX_ACCUM_GREEN_SIZE'

          Number of bits of green stored in the accumulation buffer.

     'GLX_ACCUM_BLUE_SIZE'

          Number of bits of blue stored in the accumulation buffer.

     'GLX_ACCUM_ALPHA_SIZE'

          Number of bits of alpha stored in the accumulation buffer.

     'GLX_RENDER_TYPE'

          Mask indicating what type of GLX contexts can be made current
          to the frame buffer configuration.  Valid bits are
          'GLX_RGBA_BIT' and 'GLX_COLOR_INDEX_BIT'.

     'GLX_DRAWABLE_TYPE'

          Mask indicating what drawable types the frame buffer
          configuration supports.  Valid bits are 'GLX_WINDOW_BIT',
          'GLX_PIXMAP_BIT', and 'GLX_PBUFFER_BIT'.

     'GLX_X_RENDERABLE'

          'True' if drawables created with the frame buffer
          configuration can be rendered to by X.

     'GLX_VISUAL_ID'

          XID of the corresponding visual, or zero if there is no
          associated visual (i.e., if 'GLX_X_RENDERABLE' is 'False' or
          'GLX_DRAWABLE_TYPE' does not have the 'GLX_WINDOW_BIT' bit
          set).

     'GLX_X_VISUAL_TYPE'

          Visual type of associated visual.  The returned value will be
          one of: 'GLX_TRUE_COLOR', 'GLX_DIRECT_COLOR',
          'GLX_PSEUDO_COLOR', 'GLX_STATIC_COLOR', 'GLX_GRAY_SCALE',
          'GLX_STATIC_GRAY', or 'GLX_NONE', if there is no associated
          visual (i.e., if 'GLX_X_RENDERABLE' is 'False' or
          'GLX_DRAWABLE_TYPE' does not have the 'GLX_WINDOW_BIT' bit
          set).

     'GLX_CONFIG_CAVEAT'

          One of 'GLX_NONE', 'GLX_SLOW_CONFIG', or
          'GLX_NON_CONFORMANT_CONFIG', indicating that the frame buffer
          configuration has no caveats, some aspect of the frame buffer
          configuration runs slower than other frame buffer
          configurations, or some aspect of the frame buffer
          configuration is nonconformant, respectively.

     'GLX_TRANSPARENT_TYPE'

          One of 'GLX_NONE', 'GLX_TRANSPARENT_RGB',
          'GLX_TRANSPARENT_INDEX', indicating that the frame buffer
          configuration is opaque, is transparent for particular values
          of red, green, and blue, or is transparent for particular
          index values, respectively.

     'GLX_TRANSPARENT_INDEX_VALUE'

          Integer value between 0 and the maximum frame buffer value for
          indices, indicating the transparent index value for the frame
          buffer configuration.  Undefined if 'GLX_TRANSPARENT_TYPE' is
          not 'GLX_TRANSPARENT_INDEX'.

     'GLX_TRANSPARENT_RED_VALUE'

          Integer value between 0 and the maximum frame buffer value for
          red, indicating the transparent red value for the frame buffer
          configuration.  Undefined if 'GLX_TRANSPARENT_TYPE' is not
          'GLX_TRANSPARENT_RGB'.

     'GLX_TRANSPARENT_GREEN_VALUE'

          Integer value between 0 and the maximum frame buffer value for
          green, indicating the transparent green value for the frame
          buffer configuration.  Undefined if 'GLX_TRANSPARENT_TYPE' is
          not 'GLX_TRANSPARENT_RGB'.

     'GLX_TRANSPARENT_BLUE_VALUE'

          Integer value between 0 and the maximum frame buffer value for
          blue, indicating the transparent blue value for the frame
          buffer configuration.  Undefined if 'GLX_TRANSPARENT_TYPE' is
          not 'GLX_TRANSPARENT_RGB'.

     'GLX_TRANSPARENT_ALPHA_VALUE'

          Integer value between 0 and the maximum frame buffer value for
          alpha, indicating the transparent blue value for the frame
          buffer configuration.  Undefined if 'GLX_TRANSPARENT_TYPE' is
          not 'GLX_TRANSPARENT_RGB'.

     'GLX_MAX_PBUFFER_WIDTH'

          The maximum width that can be specified to 'glXCreatePbuffer'.

     'GLX_MAX_PBUFFER_HEIGHT'

          The maximum height that can be specified to
          'glXCreatePbuffer'.

     'GLX_MAX_PBUFFER_PIXELS'

          The maximum number of pixels (width times height) for a pixel
          buffer.  Note that this value may be less than
          'GLX_MAX_PBUFFER_WIDTH' times 'GLX_MAX_PBUFFER_HEIGHT'.  Also,
          this value is static and assumes that no other pixel buffers
          or X resources are contending for the frame buffer memory.  As
          a result, it may not be possible to allocate a pixel buffer of
          the size given by 'GLX_MAX_PBUFFER_PIXELS'.

     Applications should choose the frame buffer configuration that most
     closely meets their requirements.  Creating windows, GLX pixmaps,
     or GLX pixel buffers with unnecessary buffers can result in reduced
     rendering performance as well as poor resource allocation.

     'GLX_NO_EXTENSION' is returned if DPY does not support the GLX
     extension.  'GLX_BAD_ATTRIBUTE' is returned if ATTRIBUTE is not a
     valid GLX attribute.

 -- Function: GLXFBConfig-* glXGetFBConfigs dpy screen nelements
     List all GLX frame buffer configurations for a given screen.

     DPY
          Specifies the connection to the X server.

     SCREEN
          Specifies the screen number.

     NELEMENTS
          Returns the number of GLXFBConfigs returned.

     'glXGetFBConfigs' returns a list of all GLXFBConfigs available on
     the screen specified by SCREEN.  Use 'glXGetFBConfigAttrib' to
     obtain attribute values from a specific GLXFBConfig.

 -- Function: void(*)() glXGetProcAddress procName
     Obtain a pointer to an OpenGL or GLX function.

     PROCNAME
          Specifies the name of the OpenGL or GLX function whose address
          is to be returned.

     'glXGetProcAddress' returns the address of the function specified
     in PROCNAME.  This is necessary in environments where the OpenGL
     link library exports a different set of functions than the runtime
     library.

 -- Function: void glXGetSelectedEvent dpy draw event_mask
     Returns GLX events that are selected for a window or a GLX pixel
     buffer.

     DPY
          Specifies the connection to the X server.

     DRAW
          Specifies a GLX drawable.  Must be a GLX pixel buffer or a
          window.

     EVENT_MASK
          Returns the events that are selected for DRAW.

     'glXGetSelectedEvent' returns in EVENT_MASK the events selected for
     DRAW.

     'GLXBadDrawable' is generated if DRAW is not a valid window or a
     valid GLX pixel buffer.

 -- Function: XVisualInfo-* glXGetVisualFromFBConfig dpy config
     Return visual that is associated with the frame buffer
     configuration.

     DPY
          Specifies the connection to the X server.

     CONFIG
          Specifies the GLX frame buffer configuration.

     If CONFIG is a valid GLX frame buffer configuration and it has an
     associated X Visual, then information describing that visual is
     returned; otherwise 'NULL' is returned.  Use 'XFree' to free the
     data returned.

     Returns 'NULL' if CONFIG is not a valid GLXFBConfig.

 -- Function: GLXContext glXImportContextEXT dpy contextID
     Import another process's indirect rendering context..

     DPY
          Specifies the connection to the X server.

     CONTEXTID
          Specifies a GLX rendering context.

     'glXImportContextEXT' creates a GLXContext given the XID of an
     existing GLXContext.  It may be used in place of
     'glXCreateContext', to share another process's indirect rendering
     context.

     Only the server-side context information can be shared between X
     clients; client-side state, such as pixel storage modes, cannot be
     shared.  Thus, 'glXImportContextEXT' must allocate memory to store
     client-side information.  This memory is freed by calling
     'glXFreeContextEXT'.

     This call does not create a new XID. It merely makes an existing
     object available to the importing client (Display *).  Like any
     XID, it goes away when the creating client drops its connection or
     the ID is explicitly deleted.  Note that this is when the XID goes
     away.  The object goes away when the XID goes away AND the context
     is not current to any thread.

     If CONTEXTID refers to a direct rendering context then no error is
     generated but 'glXImportContextEXT' returns NULL.

     'glXImportContextEXT' is part of the 'EXT_import_context'
     extension, not part of the core GLX command set.  If
     _glxextstring(EXT_import_context) is included in the string
     returned by 'glXQueryExtensionsString', when called with argument
     'GLX_EXTENSIONS', extension 'EXT_import_context' is supported.

     'GLXBadContext' is generated if CONTEXTID does not refer to a valid
     context.

 -- Function: Bool glXIsDirect dpy ctx
     Indicate whether direct rendering is enabled.

     DPY
          Specifies the connection to the X server.

     CTX
          Specifies the GLX context that is being queried.

     'glXIsDirect' returns 'True' if CTX is a direct rendering context,
     'False' otherwise.  Direct rendering contexts pass rendering
     commands directly from the calling process's address space to the
     rendering system, bypassing the X server.  Nondirect rendering
     contexts pass all rendering commands to the X server.

     'GLXBadContext' is generated if CTX is not a valid GLX context.

 -- Function: Bool glXMakeContextCurrent display draw read ctx
     Attach a GLX context to a GLX drawable.

     DISPLAY
          Specifies the connection to the X server.

     DRAW
          Specifies a GLX drawable to render into.  Must be an XID
          representing a GLXWindow, GLXPixmap, or GLXPbuffer.

     READ
          Specifies a GLX drawable to read from.  Must be an XID
          representing a GLXWindow, GLXPixmap, or GLXPbuffer.

     CTX
          Specifies the GLX context to be bound to READ and CTX.

     'glXMakeContextCurrent' binds CTX to the current rendering thread
     and to the DRAW and READ GLX drawables.  DRAW and READ may be the
     same.

     DRAW is used for all OpenGL operations except:

     Any pixel data that are read based on the value of
     'GLX_READ_BUFFER'.  Note that accumulation operations use the value
     of 'GLX_READ_BUFFER', but are not allowed unless DRAW is identical
     to READ.

     Any depth values that are retrieved by 'glReadPixels' or
     'glCopyPixels'.

     Any stencil values that are retrieved by 'glReadPixels' or
     'glCopyPixels'.

     Frame buffer values are taken from DRAW.

     If the current rendering thread has a current rendering context,
     that context is flushed and replaced by CTX.

     The first time that CTX is made current, the viewport and scissor
     dimensions are set to the size of the DRAW drawable.  The viewport
     and scissor are not modified when CTX is subsequently made current.

     To release the current context without assigning a new one, call
     'glXMakeContextCurrent' with DRAW and READ set to 'None' and CTX
     set to 'NULL'.

     'glXMakeContextCurrent' returns 'True' if it is successful, 'False'
     otherwise.  If 'False' is returned, the previously current
     rendering context and drawable (if any) remain unchanged.

     'BadMatch' is generated if DRAW and READ are not compatible.

     'BadAccess' is generated if CTX is current to some other thread.

     'GLXContextState' is generated if there is a current rendering
     context and its render mode is either 'GLX_FEEDBACK' or
     'GLX_SELECT'.

     'GLXBadContext' is generated if CTX is not a valid GLX rendering
     context.

     'GLXBadDrawable' is generated if DRAW or READ is not a valid GLX
     drawable.

     'GLXBadWindow' is generated if the underlying X window for either
     DRAW or READ is no longer valid.

     'GLXBadCurrentDrawable' is generated if the previous context of the
     calling thread has unflushed commands and the previous drawable is
     no longer valid.

     'BadAlloc' is generated if the X server does not have enough
     resources to allocate the buffers.

     'BadMatch' is generated if:

     DRAW and READ cannot fit into frame buffer memory simultaneously.

     DRAW or READ is a GLXPixmap and CTX is a direct-rendering context.

     DRAW or READ is a GLXPixmap and CTX was previously bound to a
     GLXWindow or GLXPbuffer.

     DRAW or READ is a GLXWindow or GLXPbuffer and CTX was previously
     bound to a GLXPixmap.

 -- Function: Bool glXMakeCurrent dpy drawable ctx
     Attach a GLX context to a window or a GLX pixmap.

     DPY
          Specifies the connection to the X server.

     DRAWABLE
          Specifies a GLX drawable.  Must be either an X window ID or a
          GLX pixmap ID.

     CTX
          Specifies a GLX rendering context that is to be attached to
          DRAWABLE.

     'glXMakeCurrent' does two things: It makes CTX the current GLX
     rendering context of the calling thread, replacing the previously
     current context if there was one, and it attaches CTX to a GLX
     drawable, either a window or a GLX pixmap.  As a result of these
     two actions, subsequent GL rendering calls use rendering context
     CTX to modify GLX drawable DRAWABLE (for reading and writing).
     Because 'glXMakeCurrent' always replaces the current rendering
     context with CTX, there can be only one current context per thread.

     Pending commands to the previous context, if any, are flushed
     before it is released.

     The first time CTX is made current to any thread, its viewport is
     set to the full size of DRAWABLE.  Subsequent calls by any thread
     to 'glXMakeCurrent' with CTX have no effect on its viewport.

     To release the current context without assigning a new one, call
     'glXMakeCurrent' with DRAWABLE set to 'None' and CTX set to 'NULL'.

     'glXMakeCurrent' returns 'True' if it is successful, 'False'
     otherwise.  If 'False' is returned, the previously current
     rendering context and drawable (if any) remain unchanged.

     'BadMatch' is generated if DRAWABLE was not created with the same X
     screen and visual as CTX.  It is also generated if DRAWABLE is
     'None' and CTX is not 'NULL'.

     'BadAccess' is generated if CTX was current to another thread at
     the time 'glXMakeCurrent' was called.

     'GLXBadDrawable' is generated if DRAWABLE is not a valid GLX
     drawable.

     'GLXBadContext' is generated if CTX is not a valid GLX context.

     'GLXBadContextState' is generated if 'glXMakeCurrent' is executed
     between the execution of 'glBegin' and the corresponding execution
     of 'glEnd'.

     'GLXBadContextState' is also generated if the rendering context
     current to the calling thread has GL renderer state 'GLX_FEEDBACK'
     or 'GLX_SELECT'.

     'GLXBadCurrentWindow' is generated if there are pending GL commands
     for the previous context and the current drawable is a window that
     is no longer valid.

     'BadAlloc' may be generated if the server has delayed allocation of
     ancillary buffers until 'glXMakeCurrent' is called, only to find
     that it has insufficient resources to complete the allocation.

 -- Function: int glXQueryContextInfoEXT dpy ctx attribute value
     Query context information.

     DPY
          Specifies the connection to the X server.

     CTX
          Specifies a GLX rendering context.

     ATTRIBUTE
          Specifies that a context parameter should be retrieved.  Must
          be one of 'GLX_SHARED_CONTEXT_EXT', 'GLX_VISUAL_ID_EXT', or
          'GLX_SCREEN_EXT'.

     VALUE
          Contains the return value for ATTRIBUTE.

     'glXQueryContextInfoEXT' sets VALUE to the value of ATTRIBUTE with
     respect to CTX.  'glXQueryContextInfoEXT' returns an error code if
     it fails for any reason.  Otherwise, 'Success' is returned.

     ATTRIBUTE may be one of the following:

     'GLX_SHARED_CONTEXT_EXT'
          Returns the XID of the share list context associated with CTX
          at its creation.

     'GLX_VISUAL_ID_EXT'
          Returns the XID of the GLX Visual associated with CTX.

     'GLX_SCREEN_EXT'
          Returns the screen number associated with CTX.

     This call may cause a round-trip to the server.

     'glXQueryContextInfoEXT' is part of the 'EXT_import_context'
     extension, not part of the core GLX command set.  If
     _glxextstring(EXT_import_context) is included in the string
     returned by 'glXQueryExtensionsString', when called with argument
     'GLX_EXTENSIONS', extension 'EXT_import_context' is supported.

     'GLXBadContext' is generated if CTX does not refer to a valid
     context.

     'GLX_BAD_ATTRIBUTE' is returned if ATTRIBUTE is not a valid GLX
     context attribute.

     fred 'GLX_BAD_CONTEXT' is returned if ATTRIBUTE is not a valid
     context.

 -- Function: int glXQueryContext dpy ctx attribute value
     Query context information.

     DPY
          Specifies the connection to the X server.

     CTX
          Specifies a GLX rendering context.

     ATTRIBUTE
          Specifies that a context parameter should be retrieved.  Must
          be one of 'GLX_FBCONFIG_ID', 'GLX_RENDER_TYPE', or
          'GLX_SCREEN'.

     VALUE
          Contains the return value for ATTRIBUTE.

     'glXQueryContext' sets VALUE to the value of ATTRIBUTE with respect
     to CTX.  ATTRIBUTE may be one of the following:

     'GLX_FBCONFIG_ID'
          Returns the XID of the GLXFBConfig associated with CTX.

     'GLX_RENDER_TYPE'
          Returns the rendering type supported by CTX.

     'GLX_SCREEN'
          Returns the screen number associated with CTX.

     'Success' is returned unless ATTRIBUTE is not a valid GLX context
     attribute, in which case 'GLX_BAD_ATTRIBUTE' is returned.

     This call may cause a round-trip to the server.

     'GLXBadContext' is generated if CTX does not refer to a valid
     context.

 -- Function: int glXQueryDrawable dpy draw attribute value
     Returns an attribute assoicated with a GLX drawable.

     DPY
          Specifies the connection to the X server.

     DRAW
          Specifies the GLX drawable to be queried.

     ATTRIBUTE
          Specifies the attribute to be returned.  Must be one of
          'GLX_WIDTH', 'GLX_HEIGHT', 'GLX_PRESERVED_CONTENTS',
          'GLX_LARGEST_PBUFFER', or 'GLX_FBCONFIG_ID'.

     VALUE
          Contains the return value for ATTRIBUTE.

     'glXQueryDrawable' sets VALUE to the value of ATTRIBUTE with
     respect to the GLXDrawable DRAW.

     ATTRIBUTE may be one of the following:

     'GLX_WIDTH'
          Returns the width of CTX.

     'GLX_HEIGHT'
          Returns the height of CTX.

     'GLX_PRESERVED_CONTENTS'
          Returns 'True' if the contents of a GLXPbuffer are preserved
          when a resource conflict occurs; 'False' otherwise.

     'GLX_LARGEST_PBUFFER'
          Returns the value set when 'glXCreatePbuffer' was called to
          create the GLXPbuffer.  If 'False' is returned, then the call
          to 'glXCreatePbuffer' will fail to create a GLXPbuffer if the
          requested size is larger than the implementation maximum or
          available resources.  If 'True' is returned, a GLXPbuffer of
          the maximum availble size (if less than the requested width
          and height) is created.

     'GLX_FBCONFIG_ID'
          Returns the XID for DRAW.

     If DRAW is a GLXWindow or GLXPixmap and ATTRIBUTE is set to
     'GLX_PRESERVED_CONTENTS' or 'GLX_LARGETST_PBUFFER', the contents of
     VALUE are undefined.  If ATTRIBUTE is not one of the attributes
     listed above, the contents of VALUE are unedfined.

     A 'GLXBadDrawable' is generated if DRAW is not a valid GLXDrawable.

 -- Function: const-char-* glXQueryExtensionsString dpy screen
     Return list of supported extensions.

     DPY
          Specifies the connection to the X server.

     SCREEN
          Specifies the screen number.

     'glXQueryExtensionsString' returns a pointer to a string describing
     which GLX extensions are supported on the connection.  The string
     is null-terminated and contains a space-separated list of extension
     names.  (The extension names themselves never contain spaces.)  If
     there are no extensions to GLX, then the empty string is returned.

 -- Function: Bool glXQueryExtension dpy errorBase eventBase
     Indicate whether the GLX extension is supported.

     DPY
          Specifies the connection to the X server.

     ERRORBASE
          Returns the base error code of the GLX server extension.

     EVENTBASE
          Returns the base event code of the GLX server extension.

     'glXQueryExtension' returns 'True' if the X server of connection
     DPY supports the GLX extension, 'False' otherwise.  If 'True' is
     returned, then ERRORBASE and EVENTBASE return the error base and
     event base of the GLX extension.  These values should be added to
     the constant error and event values to determine the actual event
     or error values.  Otherwise, ERRORBASE and EVENTBASE are unchanged.

     ERRORBASE and EVENTBASE do not return values if they are specified
     as 'NULL'.

 -- Function: const-char-* glXQueryServerString dpy screen name
     Return string describing the server.

     DPY
          Specifies the connection to the X server.

     SCREEN
          Specifies the screen number.

     NAME
          Specifies which string is returned: one of 'GLX_VENDOR',
          'GLX_VERSION', or 'GLX_EXTENSIONS'.

     'glXQueryServerString' returns a pointer to a static,
     null-terminated string describing some aspect of the server's GLX
     extension.  The possible values for NAME and the format of the
     strings is the same as for 'glXGetClientString'.  If NAME is not
     set to a recognized value, 'NULL' is returned.

 -- Function: Bool glXQueryVersion dpy major minor
     Return the version numbers of the GLX extension.

     DPY
          Specifies the connection to the X server.

     MAJOR
          Returns the major version number of the GLX server extension.

     MINOR
          Returns the minor version number of the GLX server extension.

     'glXQueryVersion' returns the major and minor version numbers of
     the GLX extension implemented by the server associated with
     connection DPY.  Implementations with the same major version number
     are upward compatible, meaning that the implementation with the
     higher minor number is a superset of the version with the lower
     minor number.

     MAJOR and MINOR do not return values if they are specified as
     'NULL'.

     'glXQueryVersion' returns 'False' if it fails, 'True' otherwise.

     MAJOR and MINOR are not updated when 'False' is returned.

 -- Function: void glXSelectEvent dpy draw event_mask
     Select GLX events for a window or a GLX pixel buffer.

     DPY
          Specifies the connection to the X server.

     DRAW
          Specifies a GLX drawable.  Must be a GLX pixel buffer or a
          window.

     EVENT_MASK
          Specifies the events to be returned for DRAW.

     'glXSelectEvent' sets the GLX event mask for a GLX pixel buffer or
     a window.  Calling 'glXSelectEvent' overrides any previous event
     mask that was set by the client for DRAW.  Note that it does not
     affect the event masks that other clients may have specified for
     DRAW since each client rendering to DRAW has a separate event mask
     for it.

     Currently, only one GLX event, 'GLX_PBUFFER_CLOBBER_MASK', can be
     selected.  The following data is returned to the client when a
     'GLX_PBUFFER_CLOBBER_MASK' event occurs:

     typedef struct {

     int EVENT_TYPE;
          /* GLX_DAMAGED or GLX_SAVED */

     int DRAW_TYPE;
          /* GLX_WINDOW or GLX_PBUFFER */

     unsigned long SERIAL;
          /* # of last request processed by server */

     Bool SEND_EVENT;
          /* true if this came for SendEvent request */

     Display *DISPLAY;
          /* display the event was read from */

     GLXDrawable DRAWABLE;
          /* i.d.  of Drawable */

     unsigned int BUFFER_MASK;
          /* mask indicating affected buffers */

     int X, Y;

     int WIDTH, HEIGHT;

     int COUNT;
          /* if nonzero, at least this many more */

     } GLXPbufferClobberEvent; The valid bit masks used in BUFFER_MASK
     are:

     *Bitmask*
          *Corresponding Buffer*

     'GLX_FRONT_LEFT_BUFFER_BIT'
          Front left color buffer

     'GLX_FRONT_RIGHT_BUFFER_BIT'
          Front right color buffer

     'GLX_BACK_LEFT_BUFFER_BIT'
          Back left color buffer

     'GLX_BACK_RIGHT_BUFFER_BIT'
          Back right color buffer

     'GLX_AUX_BUFFERS_BIT'
          Auxiliary buffer

     'GLX_DEPTH_BUFFER_BIT'
          Depth buffer

     'GLX_STENCIL_BUFFER_BIT'
          Stencil buffer

     'GLX_ACCUM_BUFFER_BIT'
          Accumulation buffer

     A single X server operation can cause several buffer clobber events
     to be sent.  (e.g., a single GLX pixel buffer may be damaged and
     cause multiple buffer clobber events to be generated).  Each event
     specifies one region of the GLX drawable that was affected by the X
     Server operation.  The BUFFER_MASK field indicates which color
     buffers and ancillary buffers were affected.  All the buffer
     clobber events generated by a single X server action are guaranteed
     to be contiguous in the event queue.  The conditions under which
     this event is generated and the EVENT_TYPE varies, depending on the
     type of the GLX drawable.

     When the 'GLX_AUX_BUFFERS_BIT' is set in BUFFER_MASK, then
     AUX_BUFFER is set to indicate which buffer was affected.  If more
     than one aux buffer was affected, then additional events are
     generated as part of the same contiguous event group.  Each
     additional event will have only the 'GLX_AUX_BUFFERS_BIT' set in
     BUFFER_MASK, and the AUX_BUFFER field will be set appropriately.
     For nonstereo drawables, 'GLX_FRONT_LEFT_BUFFER_BIT' and
     'GLX_BACK_LEFT_BUFFER_BIT' are used to specify the front and back
     color buffers.

     For preserved GLX pixel buffers, a buffer clobber event with type
     'GLX_SAVED' is generated whenever the contents of the GLX pixel
     buffer is moved out of offscreen memory.  The event(s) describes
     which portions of the GLX pixel buffer were affected.  Clients who
     receive many buffer clobber events, referring to different save
     actions, should consider freeing the GLX pixel buffer resource in
     order to prevent the system from thrashing due to insufficient
     resources.

     For an unpreserved GLXPbuffer, a buffer clobber event, with type
     'GLX_DAMAGED', is generated whenever a portion of the GLX pixel
     buffer becomes invalid.  The client may wish to regenerate the
     invalid portions of the GLX pixel buffer.

     For Windows, buffer clobber events, with type 'GLX_SAVED', occur
     whenever an ancillary buffer, associated with the window, gets
     clobbered or moved out of off-screen memory.  The event contains
     information indicating which color buffers and ancillary
     buffers\(emand which portions of those buffers\(emwere affected.

     'GLXBadDrawable' is generated if DRAW is not a valid window or a
     valid GLX pixel buffer.

 -- Function: void glXSwapBuffers dpy drawable
     Exchange front and back buffers.

     DPY
          Specifies the connection to the X server.

     DRAWABLE
          Specifies the drawable whose buffers are to be swapped.

     'glXSwapBuffers' promotes the contents of the back buffer of
     DRAWABLE to become the contents of the front buffer of DRAWABLE.
     The contents of the back buffer then become undefined.  The update
     typically takes place during the vertical retrace of the monitor,
     rather than immediately after 'glXSwapBuffers' is called.

     'glXSwapBuffers' performs an implicit 'glFlush' before it returns.
     Subsequent OpenGL commands may be issued immediately after calling
     'glXSwapBuffers', but are not executed until the buffer exchange is
     completed.

     If DRAWABLE was not created with respect to a double-buffered
     visual, 'glXSwapBuffers' has no effect, and no error is generated.

     'GLXBadDrawable' is generated if DRAWABLE is not a valid GLX
     drawable.

     'GLXBadCurrentWindow' is generated if DPY and DRAWABLE are
     respectively the display and drawable associated with the current
     context of the calling thread, and DRAWABLE identifies a window
     that is no longer valid.

 -- Function: void glXUseXFont font first count listBase
     Create bitmap display lists from an X font.

     FONT
          Specifies the font from which character glyphs are to be
          taken.

     FIRST
          Specifies the index of the first glyph to be taken.

     COUNT
          Specifies the number of glyphs to be taken.

     LISTBASE
          Specifies the index of the first display list to be generated.

     'glXUseXFont' generates COUNT display lists, named LISTBASE through
     LISTBASE+COUNT-1, each containing a single 'glBitmap' command.  The
     parameters of the 'glBitmap' command of display list LISTBASE+I are
     derived from glyph FIRST+I.  Bitmap parameters XORIG, YORIG, WIDTH,
     and HEIGHT are computed from font metrics as DESCENT-1, -LBEARING,
     RBEARING-LBEARING, and ASCENT+DESCENT, respectively.  XMOVE is
     taken from the glyph's WIDTH metric, and YMOVE is set to zero.
     Finally, the glyph's image is converted to the appropriate format
     for 'glBitmap'.

     Using 'glXUseXFont' may be more efficient than accessing the X font
     and generating the display lists explicitly, both because the
     display lists are created on the server without requiring a round
     trip of the glyph data, and because the server may choose to delay
     the creation of each bitmap until it is accessed.

     Empty display lists are created for all glyphs that are requested
     and are not defined in FONT.  'glXUseXFont' is ignored if there is
     no current GLX context.

     'BadFont' is generated if FONT is not a valid font.

     'GLXBadContextState' is generated if the current GLX context is in
     display-list construction mode.

     'GLXBadCurrentWindow' is generated if the drawable associated with
     the current context of the calling thread is a window, and that
     window is no longer valid.

 -- Function: void glXWaitGL
     Complete GL execution prior to subsequent X calls.

     GL rendering calls made prior to 'glXWaitGL' are guaranteed to be
     executed before X rendering calls made after 'glXWaitGL'.  Although
     this same result can be achieved using 'glFinish', 'glXWaitGL' does
     not require a round trip to the server, and it is therefore more
     efficient in cases where client and server are on separate
     machines.

     'glXWaitGL' is ignored if there is no current GLX context.

     'GLXBadCurrentWindow' is generated if the drawable associated with
     the current context of the calling thread is a window, and that
     window is no longer valid.

 -- Function: void glXWaitX
     Complete X execution prior to subsequent GL calls.

     X rendering calls made prior to 'glXWaitX' are guaranteed to be
     executed before GL rendering calls made after 'glXWaitX'.  Although
     the same result can be achieved using 'XSync', 'glXWaitX' does not
     require a round trip to the server, and it is therefore more
     efficient in cases where client and server are on separate
     machines.

     'glXWaitX' is ignored if there is no current GLX context.

     'GLXBadCurrentWindow' is generated if the drawable associated with
     the current context of the calling thread is a window, and that
     window is no longer valid.


File: guile-opengl.info,  Node: GLUT,  Next: GNU General Public License,  Prev: GLX,  Up: Top

6 GLUT
******

Import the GLUT module to have access to these procedures:

     (use-modules (glut))

   The GLUT specification is available at
<http://www.opengl.org/resources/libraries/glut/glut-3.spec.pdf>.

* Menu:

* GLUT Initialization::
* Beginning Event Processing::
* Window Management::
* Overlay Management::
* Menu Management::
* Callback Registration::
* Color Index Colormap Management::
* State Retrieval::
* Font Rendering::
* Geometric Object Rendering::


File: guile-opengl.info,  Node: GLUT Initialization,  Next: Beginning Event Processing,  Up: GLUT

6.1 GLUT Initialization
=======================

 -- Function: set-initial-display-mode mode

 -- Function: set-initial-window-position x y

 -- Function: set-initial-window-size width height

 -- Function: initialize-glut [args] [#:window-position] [#:window-size]
          [#:display-mode]


File: guile-opengl.info,  Node: Beginning Event Processing,  Next: Window Management,  Prev: GLUT Initialization,  Up: GLUT

6.2 Beginning Event Processing
==============================

 -- Function: glut-main-loop


File: guile-opengl.info,  Node: Window Management,  Next: Overlay Management,  Prev: Beginning Event Processing,  Up: GLUT

6.3 Window Management
=====================

 -- Function: window-id

 -- Function: window-live?

 -- Function: window?

 -- Function: set-window-cursor! window cursor

 -- Function: set-window-icon-title! window str

 -- Function: set-window-title! window str

 -- Function: show-window [window]

 -- Function: sub-window? window

 -- Function: swap-buffers [window]

 -- Function: top-level-window? window

 -- Macro: with-window window body1 body2 ...

 -- Function: with-window* _ _

 -- Function: make-sub-window window x y width height

 -- Function: make-window str

 -- Function: pop-window

 -- Function: position-window window x y

 -- Function: post-redisplay [window]

 -- Function: push-window

 -- Function: reshape-window window width height

 -- Function: current-window

 -- Function: destroy-window window

 -- Function: full-screen window full-screen?

 -- Function: hide-window [window]

 -- Function: iconify-window [window]


File: guile-opengl.info,  Node: Overlay Management,  Next: Menu Management,  Prev: Window Management,  Up: GLUT

6.4 Overlay Management
======================


File: guile-opengl.info,  Node: Menu Management,  Next: Callback Registration,  Prev: Overlay Management,  Up: GLUT

6.5 Menu Management
===================


File: guile-opengl.info,  Node: Callback Registration,  Next: Color Index Colormap Management,  Prev: Menu Management,  Up: GLUT

6.6 Callback Registration
=========================

 -- Function: set-button-box-callback func

 -- Function: set-current-window window

 -- Function: set-dials-callback func

 -- Function: set-display-callback func

 -- Function: set-entry-callback func

 -- Function: set-idle-callback func

 -- Function: set-keyboard-callback func

 -- Function: set-menu-status-callback func

 -- Function: set-motion-callback func

 -- Function: set-mouse-callback func

 -- Function: set-overlay-display-callback func

 -- Function: set-passive-motion-callback func

 -- Function: set-reshape-callback func

 -- Function: set-spaceball-button-callback func

 -- Function: set-spaceball-motion-callback func

 -- Function: set-spaceball-rotate-callback func

 -- Function: set-special-callback func

 -- Function: set-tablet-button-callback func

 -- Function: set-tablet-motion-callback func

 -- Function: set-visibility-callback func

 -- Function: add-timer-callback msecs func value


File: guile-opengl.info,  Node: Color Index Colormap Management,  Next: State Retrieval,  Prev: Callback Registration,  Up: GLUT

6.7 Color Index Colormap Management
===================================


File: guile-opengl.info,  Node: State Retrieval,  Next: Font Rendering,  Prev: Color Index Colormap Management,  Up: GLUT

6.8 State Retrieval
===================

 -- Function: window-alpha-size window

 -- Function: window-blue-size window

 -- Function: window-color-buffer-size window

 -- Function: window-colormap-size window

 -- Function: window-depth-buffer-size window

 -- Function: window-double-buffered? window

 -- Function: window-green-size window

 -- Function: window-height width

 -- Function: window-number-of-children window

 -- Function: window-number-of-samples window

 -- Function: window-parent window

 -- Function: window-position window

 -- Function: window-red-size window

 -- Function: window-size window

 -- Function: window-stencil-buffer-size window

 -- Function: window-stereo? window

 -- Function: window-rgba window

 -- Function: window-width width

 -- Function: window-x width

 -- Function: window-y width

 -- Function: screen-height

 -- Function: screen-height-mm

 -- Function: screen-size

 -- Function: screen-size-mm

 -- Function: screen-width

 -- Function: screen-width-mm

 -- Function: display-mode-possible?

 -- Function: initial-display-mode

 -- Function: initial-window-height

 -- Function: initial-window-position

 -- Function: initial-window-size

 -- Function: initial-window-width

 -- Function: initial-window-x

 -- Function: initial-window-y

 -- Function: elapsed-time


File: guile-opengl.info,  Node: Font Rendering,  Next: Geometric Object Rendering,  Prev: State Retrieval,  Up: GLUT

6.9 Font Rendering
==================


File: guile-opengl.info,  Node: Geometric Object Rendering,  Prev: Font Rendering,  Up: GLUT

6.10 Geometric Object Rendering
===============================


File: guile-opengl.info,  Node: GNU General Public License,  Next: GNU Lesser General Public License,  Prev: GLUT,  Up: Top

Appendix A GNU General Public License
*************************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

Preamble
========

The GNU General Public License is a free, copyleft license for software
and other kinds of works.

   The licenses for most software and other practical works are designed
to take away your freedom to share and change the works.  By contrast,
the GNU General Public License is intended to guarantee your freedom to
share and change all versions of a program--to make sure it remains free
software for all its users.  We, the Free Software Foundation, use the
GNU General Public License for most of our software; it applies also to
any other work released this way by its authors.  You can apply it to
your programs, too.

   When we speak of free software, we are referring to freedom, not
price.  Our General Public Licenses are designed to make sure that you
have the freedom to distribute copies of free software (and charge for
them if you wish), that you receive source code or can get it if you
want it, that you can change the software or use pieces of it in new
free programs, and that you know you can do these things.

   To protect your rights, we need to prevent others from denying you
these rights or asking you to surrender the rights.  Therefore, you have
certain responsibilities if you distribute copies of the software, or if
you modify it: responsibilities to respect the freedom of others.

   For example, if you distribute copies of such a program, whether
gratis or for a fee, you must pass on to the recipients the same
freedoms that you received.  You must make sure that they, too, receive
or can get the source code.  And you must show them these terms so they
know their rights.

   Developers that use the GNU GPL protect your rights with two steps:
(1) assert copyright on the software, and (2) offer you this License
giving you legal permission to copy, distribute and/or modify it.

   For the developers' and authors' protection, the GPL clearly explains
that there is no warranty for this free software.  For both users' and
authors' sake, the GPL requires that modified versions be marked as
changed, so that their problems will not be attributed erroneously to
authors of previous versions.

   Some devices are designed to deny users access to install or run
modified versions of the software inside them, although the manufacturer
can do so.  This is fundamentally incompatible with the aim of
protecting users' freedom to change the software.  The systematic
pattern of such abuse occurs in the area of products for individuals to
use, which is precisely where it is most unacceptable.  Therefore, we
have designed this version of the GPL to prohibit the practice for those
products.  If such problems arise substantially in other domains, we
stand ready to extend this provision to those domains in future versions
of the GPL, as needed to protect the freedom of users.

   Finally, every program is threatened constantly by software patents.
States should not allow patents to restrict development and use of
software on general-purpose computers, but in those that do, we wish to
avoid the special danger that patents applied to a free program could
make it effectively proprietary.  To prevent this, the GPL assures that
patents cannot be used to render the program non-free.

   The precise terms and conditions for copying, distribution and
modification follow.

TERMS AND CONDITIONS
====================

  0. Definitions.

     "This License" refers to version 3 of the GNU General Public
     License.

     "Copyright" also means copyright-like laws that apply to other
     kinds of works, such as semiconductor masks.

     "The Program" refers to any copyrightable work licensed under this
     License.  Each licensee is addressed as "you".  "Licensees" and
     "recipients" may be individuals or organizations.

     To "modify" a work means to copy from or adapt all or part of the
     work in a fashion requiring copyright permission, other than the
     making of an exact copy.  The resulting work is called a "modified
     version" of the earlier work or a work "based on" the earlier work.

     A "covered work" means either the unmodified Program or a work
     based on the Program.

     To "propagate" a work means to do anything with it that, without
     permission, would make you directly or secondarily liable for
     infringement under applicable copyright law, except executing it on
     a computer or modifying a private copy.  Propagation includes
     copying, distribution (with or without modification), making
     available to the public, and in some countries other activities as
     well.

     To "convey" a work means any kind of propagation that enables other
     parties to make or receive copies.  Mere interaction with a user
     through a computer network, with no transfer of a copy, is not
     conveying.

     An interactive user interface displays "Appropriate Legal Notices"
     to the extent that it includes a convenient and prominently visible
     feature that (1) displays an appropriate copyright notice, and (2)
     tells the user that there is no warranty for the work (except to
     the extent that warranties are provided), that licensees may convey
     the work under this License, and how to view a copy of this
     License.  If the interface presents a list of user commands or
     options, such as a menu, a prominent item in the list meets this
     criterion.

  1. Source Code.

     The "source code" for a work means the preferred form of the work
     for making modifications to it.  "Object code" means any non-source
     form of a work.

     A "Standard Interface" means an interface that either is an
     official standard defined by a recognized standards body, or, in
     the case of interfaces specified for a particular programming
     language, one that is widely used among developers working in that
     language.

     The "System Libraries" of an executable work include anything,
     other than the work as a whole, that (a) is included in the normal
     form of packaging a Major Component, but which is not part of that
     Major Component, and (b) serves only to enable use of the work with
     that Major Component, or to implement a Standard Interface for
     which an implementation is available to the public in source code
     form.  A "Major Component", in this context, means a major
     essential component (kernel, window system, and so on) of the
     specific operating system (if any) on which the executable work
     runs, or a compiler used to produce the work, or an object code
     interpreter used to run it.

     The "Corresponding Source" for a work in object code form means all
     the source code needed to generate, install, and (for an executable
     work) run the object code and to modify the work, including scripts
     to control those activities.  However, it does not include the
     work's System Libraries, or general-purpose tools or generally
     available free programs which are used unmodified in performing
     those activities but which are not part of the work.  For example,
     Corresponding Source includes interface definition files associated
     with source files for the work, and the source code for shared
     libraries and dynamically linked subprograms that the work is
     specifically designed to require, such as by intimate data
     communication or control flow between those subprograms and other
     parts of the work.

     The Corresponding Source need not include anything that users can
     regenerate automatically from other parts of the Corresponding
     Source.

     The Corresponding Source for a work in source code form is that
     same work.

  2. Basic Permissions.

     All rights granted under this License are granted for the term of
     copyright on the Program, and are irrevocable provided the stated
     conditions are met.  This License explicitly affirms your unlimited
     permission to run the unmodified Program.  The output from running
     a covered work is covered by this License only if the output, given
     its content, constitutes a covered work.  This License acknowledges
     your rights of fair use or other equivalent, as provided by
     copyright law.

     You may make, run and propagate covered works that you do not
     convey, without conditions so long as your license otherwise
     remains in force.  You may convey covered works to others for the
     sole purpose of having them make modifications exclusively for you,
     or provide you with facilities for running those works, provided
     that you comply with the terms of this License in conveying all
     material for which you do not control copyright.  Those thus making
     or running the covered works for you must do so exclusively on your
     behalf, under your direction and control, on terms that prohibit
     them from making any copies of your copyrighted material outside
     their relationship with you.

     Conveying under any other circumstances is permitted solely under
     the conditions stated below.  Sublicensing is not allowed; section
     10 makes it unnecessary.

  3. Protecting Users' Legal Rights From Anti-Circumvention Law.

     No covered work shall be deemed part of an effective technological
     measure under any applicable law fulfilling obligations under
     article 11 of the WIPO copyright treaty adopted on 20 December
     1996, or similar laws prohibiting or restricting circumvention of
     such measures.

     When you convey a covered work, you waive any legal power to forbid
     circumvention of technological measures to the extent such
     circumvention is effected by exercising rights under this License
     with respect to the covered work, and you disclaim any intention to
     limit operation or modification of the work as a means of
     enforcing, against the work's users, your or third parties' legal
     rights to forbid circumvention of technological measures.

  4. Conveying Verbatim Copies.

     You may convey verbatim copies of the Program's source code as you
     receive it, in any medium, provided that you conspicuously and
     appropriately publish on each copy an appropriate copyright notice;
     keep intact all notices stating that this License and any
     non-permissive terms added in accord with section 7 apply to the
     code; keep intact all notices of the absence of any warranty; and
     give all recipients a copy of this License along with the Program.

     You may charge any price or no price for each copy that you convey,
     and you may offer support or warranty protection for a fee.

  5. Conveying Modified Source Versions.

     You may convey a work based on the Program, or the modifications to
     produce it from the Program, in the form of source code under the
     terms of section 4, provided that you also meet all of these
     conditions:

       a. The work must carry prominent notices stating that you
          modified it, and giving a relevant date.

       b. The work must carry prominent notices stating that it is
          released under this License and any conditions added under
          section 7.  This requirement modifies the requirement in
          section 4 to "keep intact all notices".

       c. You must license the entire work, as a whole, under this
          License to anyone who comes into possession of a copy.  This
          License will therefore apply, along with any applicable
          section 7 additional terms, to the whole of the work, and all
          its parts, regardless of how they are packaged.  This License
          gives no permission to license the work in any other way, but
          it does not invalidate such permission if you have separately
          received it.

       d. If the work has interactive user interfaces, each must display
          Appropriate Legal Notices; however, if the Program has
          interactive interfaces that do not display Appropriate Legal
          Notices, your work need not make them do so.

     A compilation of a covered work with other separate and independent
     works, which are not by their nature extensions of the covered
     work, and which are not combined with it such as to form a larger
     program, in or on a volume of a storage or distribution medium, is
     called an "aggregate" if the compilation and its resulting
     copyright are not used to limit the access or legal rights of the
     compilation's users beyond what the individual works permit.
     Inclusion of a covered work in an aggregate does not cause this
     License to apply to the other parts of the aggregate.

  6. Conveying Non-Source Forms.

     You may convey a covered work in object code form under the terms
     of sections 4 and 5, provided that you also convey the
     machine-readable Corresponding Source under the terms of this
     License, in one of these ways:

       a. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by the
          Corresponding Source fixed on a durable physical medium
          customarily used for software interchange.

       b. Convey the object code in, or embodied in, a physical product
          (including a physical distribution medium), accompanied by a
          written offer, valid for at least three years and valid for as
          long as you offer spare parts or customer support for that
          product model, to give anyone who possesses the object code
          either (1) a copy of the Corresponding Source for all the
          software in the product that is covered by this License, on a
          durable physical medium customarily used for software
          interchange, for a price no more than your reasonable cost of
          physically performing this conveying of source, or (2) access
          to copy the Corresponding Source from a network server at no
          charge.

       c. Convey individual copies of the object code with a copy of the
          written offer to provide the Corresponding Source.  This
          alternative is allowed only occasionally and noncommercially,
          and only if you received the object code with such an offer,
          in accord with subsection 6b.

       d. Convey the object code by offering access from a designated
          place (gratis or for a charge), and offer equivalent access to
          the Corresponding Source in the same way through the same
          place at no further charge.  You need not require recipients
          to copy the Corresponding Source along with the object code.
          If the place to copy the object code is a network server, the
          Corresponding Source may be on a different server (operated by
          you or a third party) that supports equivalent copying
          facilities, provided you maintain clear directions next to the
          object code saying where to find the Corresponding Source.
          Regardless of what server hosts the Corresponding Source, you
          remain obligated to ensure that it is available for as long as
          needed to satisfy these requirements.

       e. Convey the object code using peer-to-peer transmission,
          provided you inform other peers where the object code and
          Corresponding Source of the work are being offered to the
          general public at no charge under subsection 6d.

     A separable portion of the object code, whose source code is
     excluded from the Corresponding Source as a System Library, need
     not be included in conveying the object code work.

     A "User Product" is either (1) a "consumer product", which means
     any tangible personal property which is normally used for personal,
     family, or household purposes, or (2) anything designed or sold for
     incorporation into a dwelling.  In determining whether a product is
     a consumer product, doubtful cases shall be resolved in favor of
     coverage.  For a particular product received by a particular user,
     "normally used" refers to a typical or common use of that class of
     product, regardless of the status of the particular user or of the
     way in which the particular user actually uses, or expects or is
     expected to use, the product.  A product is a consumer product
     regardless of whether the product has substantial commercial,
     industrial or non-consumer uses, unless such uses represent the
     only significant mode of use of the product.

     "Installation Information" for a User Product means any methods,
     procedures, authorization keys, or other information required to
     install and execute modified versions of a covered work in that
     User Product from a modified version of its Corresponding Source.
     The information must suffice to ensure that the continued
     functioning of the modified object code is in no case prevented or
     interfered with solely because modification has been made.

     If you convey an object code work under this section in, or with,
     or specifically for use in, a User Product, and the conveying
     occurs as part of a transaction in which the right of possession
     and use of the User Product is transferred to the recipient in
     perpetuity or for a fixed term (regardless of how the transaction
     is characterized), the Corresponding Source conveyed under this
     section must be accompanied by the Installation Information.  But
     this requirement does not apply if neither you nor any third party
     retains the ability to install modified object code on the User
     Product (for example, the work has been installed in ROM).

     The requirement to provide Installation Information does not
     include a requirement to continue to provide support service,
     warranty, or updates for a work that has been modified or installed
     by the recipient, or for the User Product in which it has been
     modified or installed.  Access to a network may be denied when the
     modification itself materially and adversely affects the operation
     of the network or violates the rules and protocols for
     communication across the network.

     Corresponding Source conveyed, and Installation Information
     provided, in accord with this section must be in a format that is
     publicly documented (and with an implementation available to the
     public in source code form), and must require no special password
     or key for unpacking, reading or copying.

  7. Additional Terms.

     "Additional permissions" are terms that supplement the terms of
     this License by making exceptions from one or more of its
     conditions.  Additional permissions that are applicable to the
     entire Program shall be treated as though they were included in
     this License, to the extent that they are valid under applicable
     law.  If additional permissions apply only to part of the Program,
     that part may be used separately under those permissions, but the
     entire Program remains governed by this License without regard to
     the additional permissions.

     When you convey a copy of a covered work, you may at your option
     remove any additional permissions from that copy, or from any part
     of it.  (Additional permissions may be written to require their own
     removal in certain cases when you modify the work.)  You may place
     additional permissions on material, added by you to a covered work,
     for which you have or can give appropriate copyright permission.

     Notwithstanding any other provision of this License, for material
     you add to a covered work, you may (if authorized by the copyright
     holders of that material) supplement the terms of this License with
     terms:

       a. Disclaiming warranty or limiting liability differently from
          the terms of sections 15 and 16 of this License; or

       b. Requiring preservation of specified reasonable legal notices
          or author attributions in that material or in the Appropriate
          Legal Notices displayed by works containing it; or

       c. Prohibiting misrepresentation of the origin of that material,
          or requiring that modified versions of such material be marked
          in reasonable ways as different from the original version; or

       d. Limiting the use for publicity purposes of names of licensors
          or authors of the material; or

       e. Declining to grant rights under trademark law for use of some
          trade names, trademarks, or service marks; or

       f. Requiring indemnification of licensors and authors of that
          material by anyone who conveys the material (or modified
          versions of it) with contractual assumptions of liability to
          the recipient, for any liability that these contractual
          assumptions directly impose on those licensors and authors.

     All other non-permissive additional terms are considered "further
     restrictions" within the meaning of section 10.  If the Program as
     you received it, or any part of it, contains a notice stating that
     it is governed by this License along with a term that is a further
     restriction, you may remove that term.  If a license document
     contains a further restriction but permits relicensing or conveying
     under this License, you may add to a covered work material governed
     by the terms of that license document, provided that the further
     restriction does not survive such relicensing or conveying.

     If you add terms to a covered work in accord with this section, you
     must place, in the relevant source files, a statement of the
     additional terms that apply to those files, or a notice indicating
     where to find the applicable terms.

     Additional terms, permissive or non-permissive, may be stated in
     the form of a separately written license, or stated as exceptions;
     the above requirements apply either way.

  8. Termination.

     You may not propagate or modify a covered work except as expressly
     provided under this License.  Any attempt otherwise to propagate or
     modify it is void, and will automatically terminate your rights
     under this License (including any patent licenses granted under the
     third paragraph of section 11).

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, you do not qualify to receive new licenses
     for the same material under section 10.

  9. Acceptance Not Required for Having Copies.

     You are not required to accept this License in order to receive or
     run a copy of the Program.  Ancillary propagation of a covered work
     occurring solely as a consequence of using peer-to-peer
     transmission to receive a copy likewise does not require
     acceptance.  However, nothing other than this License grants you
     permission to propagate or modify any covered work.  These actions
     infringe copyright if you do not accept this License.  Therefore,
     by modifying or propagating a covered work, you indicate your
     acceptance of this License to do so.

  10. Automatic Licensing of Downstream Recipients.

     Each time you convey a covered work, the recipient automatically
     receives a license from the original licensors, to run, modify and
     propagate that work, subject to this License.  You are not
     responsible for enforcing compliance by third parties with this
     License.

     An "entity transaction" is a transaction transferring control of an
     organization, or substantially all assets of one, or subdividing an
     organization, or merging organizations.  If propagation of a
     covered work results from an entity transaction, each party to that
     transaction who receives a copy of the work also receives whatever
     licenses to the work the party's predecessor in interest had or
     could give under the previous paragraph, plus a right to possession
     of the Corresponding Source of the work from the predecessor in
     interest, if the predecessor has it or can get it with reasonable
     efforts.

     You may not impose any further restrictions on the exercise of the
     rights granted or affirmed under this License.  For example, you
     may not impose a license fee, royalty, or other charge for exercise
     of rights granted under this License, and you may not initiate
     litigation (including a cross-claim or counterclaim in a lawsuit)
     alleging that any patent claim is infringed by making, using,
     selling, offering for sale, or importing the Program or any portion
     of it.

  11. Patents.

     A "contributor" is a copyright holder who authorizes use under this
     License of the Program or a work on which the Program is based.
     The work thus licensed is called the contributor's "contributor
     version".

     A contributor's "essential patent claims" are all patent claims
     owned or controlled by the contributor, whether already acquired or
     hereafter acquired, that would be infringed by some manner,
     permitted by this License, of making, using, or selling its
     contributor version, but do not include claims that would be
     infringed only as a consequence of further modification of the
     contributor version.  For purposes of this definition, "control"
     includes the right to grant patent sublicenses in a manner
     consistent with the requirements of this License.

     Each contributor grants you a non-exclusive, worldwide,
     royalty-free patent license under the contributor's essential
     patent claims, to make, use, sell, offer for sale, import and
     otherwise run, modify and propagate the contents of its contributor
     version.

     In the following three paragraphs, a "patent license" is any
     express agreement or commitment, however denominated, not to
     enforce a patent (such as an express permission to practice a
     patent or covenant not to sue for patent infringement).  To "grant"
     such a patent license to a party means to make such an agreement or
     commitment not to enforce a patent against the party.

     If you convey a covered work, knowingly relying on a patent
     license, and the Corresponding Source of the work is not available
     for anyone to copy, free of charge and under the terms of this
     License, through a publicly available network server or other
     readily accessible means, then you must either (1) cause the
     Corresponding Source to be so available, or (2) arrange to deprive
     yourself of the benefit of the patent license for this particular
     work, or (3) arrange, in a manner consistent with the requirements
     of this License, to extend the patent license to downstream
     recipients.  "Knowingly relying" means you have actual knowledge
     that, but for the patent license, your conveying the covered work
     in a country, or your recipient's use of the covered work in a
     country, would infringe one or more identifiable patents in that
     country that you have reason to believe are valid.

     If, pursuant to or in connection with a single transaction or
     arrangement, you convey, or propagate by procuring conveyance of, a
     covered work, and grant a patent license to some of the parties
     receiving the covered work authorizing them to use, propagate,
     modify or convey a specific copy of the covered work, then the
     patent license you grant is automatically extended to all
     recipients of the covered work and works based on it.

     A patent license is "discriminatory" if it does not include within
     the scope of its coverage, prohibits the exercise of, or is
     conditioned on the non-exercise of one or more of the rights that
     are specifically granted under this License.  You may not convey a
     covered work if you are a party to an arrangement with a third
     party that is in the business of distributing software, under which
     you make payment to the third party based on the extent of your
     activity of conveying the work, and under which the third party
     grants, to any of the parties who would receive the covered work
     from you, a discriminatory patent license (a) in connection with
     copies of the covered work conveyed by you (or copies made from
     those copies), or (b) primarily for and in connection with specific
     products or compilations that contain the covered work, unless you
     entered into that arrangement, or that patent license was granted,
     prior to 28 March 2007.

     Nothing in this License shall be construed as excluding or limiting
     any implied license or other defenses to infringement that may
     otherwise be available to you under applicable patent law.

  12. No Surrender of Others' Freedom.

     If conditions are imposed on you (whether by court order, agreement
     or otherwise) that contradict the conditions of this License, they
     do not excuse you from the conditions of this License.  If you
     cannot convey a covered work so as to satisfy simultaneously your
     obligations under this License and any other pertinent obligations,
     then as a consequence you may not convey it at all.  For example,
     if you agree to terms that obligate you to collect a royalty for
     further conveying from those to whom you convey the Program, the
     only way you could satisfy both those terms and this License would
     be to refrain entirely from conveying the Program.

  13. Use with the GNU Affero General Public License.

     Notwithstanding any other provision of this License, you have
     permission to link or combine any covered work with a work licensed
     under version 3 of the GNU Affero General Public License into a
     single combined work, and to convey the resulting work.  The terms
     of this License will continue to apply to the part which is the
     covered work, but the special requirements of the GNU Affero
     General Public License, section 13, concerning interaction through
     a network will apply to the combination as such.

  14. Revised Versions of this License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU General Public License from time to time.  Such
     new versions will be similar in spirit to the present version, but
     may differ in detail to address new problems or concerns.

     Each version is given a distinguishing version number.  If the
     Program specifies that a certain numbered version of the GNU
     General Public License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that numbered version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version
     number of the GNU General Public License, you may choose any
     version ever published by the Free Software Foundation.

     If the Program specifies that a proxy can decide which future
     versions of the GNU General Public License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Program.

     Later license versions may give you additional or different
     permissions.  However, no additional obligations are imposed on any
     author or copyright holder as a result of your choosing to follow a
     later version.

  15. Disclaimer of Warranty.

     THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
     APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE
     COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS"
     WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED,
     INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE
     RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.
     SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL
     NECESSARY SERVICING, REPAIR OR CORRECTION.

  16. Limitation of Liability.

     IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN
     WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES
     AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR
     DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR
     CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE
     THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA
     BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
     PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF
     THE POSSIBILITY OF SUCH DAMAGES.

  17. Interpretation of Sections 15 and 16.

     If the disclaimer of warranty and limitation of liability provided
     above cannot be given local legal effect according to their terms,
     reviewing courts shall apply local law that most closely
     approximates an absolute waiver of all civil liability in
     connection with the Program, unless a warranty or assumption of
     liability accompanies a copy of the Program in return for a fee.

END OF TERMS AND CONDITIONS
===========================

How to Apply These Terms to Your New Programs
=============================================

If you develop a new program, and you want it to be of the greatest
possible use to the public, the best way to achieve this is to make it
free software which everyone can redistribute and change under these
terms.

   To do so, attach the following notices to the program.  It is safest
to attach them to the start of each source file to most effectively
state the exclusion of warranty; and each file should have at least the
"copyright" line and a pointer to where the full notice is found.

     ONE LINE TO GIVE THE PROGRAM'S NAME AND A BRIEF IDEA OF WHAT IT DOES.
     Copyright (C) YEAR NAME OF AUTHOR

     This program is free software: you can redistribute it and/or modify
     it under the terms of the GNU General Public License as published by
     the Free Software Foundation, either version 3 of the License, or (at
     your option) any later version.

     This program is distributed in the hope that it will be useful, but
     WITHOUT ANY WARRANTY; without even the implied warranty of
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     General Public License for more details.

     You should have received a copy of the GNU General Public License
     along with this program.  If not, see <http://www.gnu.org/licenses/>.

   Also add information on how to contact you by electronic and paper
mail.

   If the program does terminal interaction, make it output a short
notice like this when it starts in an interactive mode:

     PROGRAM Copyright (C) YEAR NAME OF AUTHOR
     This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'.
     This is free software, and you are welcome to redistribute it
     under certain conditions; type 'show c' for details.

   The hypothetical commands 'show w' and 'show c' should show the
appropriate parts of the General Public License.  Of course, your
program's commands might be different; for a GUI interface, you would
use an "about box".

   You should also get your employer (if you work as a programmer) or
school, if any, to sign a "copyright disclaimer" for the program, if
necessary.  For more information on this, and how to apply and follow
the GNU GPL, see <http://www.gnu.org/licenses/>.

   The GNU General Public License does not permit incorporating your
program into proprietary programs.  If your program is a subroutine
library, you may consider it more useful to permit linking proprietary
applications with the library.  If this is what you want to do, use the
GNU Lesser General Public License instead of this License.  But first,
please read <http://www.gnu.org/philosophy/why-not-lgpl.html>.


File: guile-opengl.info,  Node: GNU Lesser General Public License,  Next: Function Index,  Prev: GNU General Public License,  Up: Top

Appendix B GNU Lesser General Public License
********************************************

                        Version 3, 29 June 2007

     Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies of this
     license document, but changing it is not allowed.

   This version of the GNU Lesser General Public License incorporates
the terms and conditions of version 3 of the GNU General Public License,
supplemented by the additional permissions listed below.

  0. Additional Definitions.

     As used herein, "this License" refers to version 3 of the GNU
     Lesser General Public License, and the "GNU GPL" refers to version
     3 of the GNU General Public License.

     "The Library" refers to a covered work governed by this License,
     other than an Application or a Combined Work as defined below.

     An "Application" is any work that makes use of an interface
     provided by the Library, but which is not otherwise based on the
     Library.  Defining a subclass of a class defined by the Library is
     deemed a mode of using an interface provided by the Library.

     A "Combined Work" is a work produced by combining or linking an
     Application with the Library.  The particular version of the
     Library with which the Combined Work was made is also called the
     "Linked Version".

     The "Minimal Corresponding Source" for a Combined Work means the
     Corresponding Source for the Combined Work, excluding any source
     code for portions of the Combined Work that, considered in
     isolation, are based on the Application, and not on the Linked
     Version.

     The "Corresponding Application Code" for a Combined Work means the
     object code and/or source code for the Application, including any
     data and utility programs needed for reproducing the Combined Work
     from the Application, but excluding the System Libraries of the
     Combined Work.

  1. Exception to Section 3 of the GNU GPL.

     You may convey a covered work under sections 3 and 4 of this
     License without being bound by section 3 of the GNU GPL.

  2. Conveying Modified Versions.

     If you modify a copy of the Library, and, in your modifications, a
     facility refers to a function or data to be supplied by an
     Application that uses the facility (other than as an argument
     passed when the facility is invoked), then you may convey a copy of
     the modified version:

       a. under this License, provided that you make a good faith effort
          to ensure that, in the event an Application does not supply
          the function or data, the facility still operates, and
          performs whatever part of its purpose remains meaningful, or

       b. under the GNU GPL, with none of the additional permissions of
          this License applicable to that copy.

  3. Object Code Incorporating Material from Library Header Files.

     The object code form of an Application may incorporate material
     from a header file that is part of the Library.  You may convey
     such object code under terms of your choice, provided that, if the
     incorporated material is not limited to numerical parameters, data
     structure layouts and accessors, or small macros, inline functions
     and templates (ten or fewer lines in length), you do both of the
     following:

       a. Give prominent notice with each copy of the object code that
          the Library is used in it and that the Library and its use are
          covered by this License.
       b. Accompany the object code with a copy of the GNU GPL and this
          license document.

  4. Combined Works.

     You may convey a Combined Work under terms of your choice that,
     taken together, effectively do not restrict modification of the
     portions of the Library contained in the Combined Work and reverse
     engineering for debugging such modifications, if you also do each
     of the following:

       a. Give prominent notice with each copy of the Combined Work that
          the Library is used in it and that the Library and its use are
          covered by this License.
       b. Accompany the Combined Work with a copy of the GNU GPL and
          this license document.
       c. For a Combined Work that displays copyright notices during
          execution, include the copyright notice for the Library among
          these notices, as well as a reference directing the user to
          the copies of the GNU GPL and this license document.
       d. Do one of the following:

            0. Convey the Minimal Corresponding Source under the terms
               of this License, and the Corresponding Application Code
               in a form suitable for, and under terms that permit, the
               user to recombine or relink the Application with a
               modified version of the Linked Version to produce a
               modified Combined Work, in the manner specified by
               section 6 of the GNU GPL for conveying Corresponding
               Source.
            1. Use a suitable shared library mechanism for linking with
               the Library.  A suitable mechanism is one that (a) uses
               at run time a copy of the Library already present on the
               user's computer system, and (b) will operate properly
               with a modified version of the Library that is
               interface-compatible with the Linked Version.

       e. Provide Installation Information, but only if you would
          otherwise be required to provide such information under
          section 6 of the GNU GPL, and only to the extent that such
          information is necessary to install and execute a modified
          version of the Combined Work produced by recombining or
          relinking the Application with a modified version of the
          Linked Version.  (If you use option 4d0, the Installation
          Information must accompany the Minimal Corresponding Source
          and Corresponding Application Code.  If you use option 4d1,
          you must provide the Installation Information in the manner
          specified by section 6 of the GNU GPL for conveying
          Corresponding Source.)

  5. Combined Libraries.

     You may place library facilities that are a work based on the
     Library side by side in a single library together with other
     library facilities that are not Applications and are not covered by
     this License, and convey such a combined library under terms of
     your choice, if you do both of the following:

       a. Accompany the combined library with a copy of the same work
          based on the Library, uncombined with any other library
          facilities, conveyed under the terms of this License.
       b. Give prominent notice with the combined library that part of
          it is a work based on the Library, and explaining where to
          find the accompanying uncombined form of the same work.

  6. Revised Versions of the GNU Lesser General Public License.

     The Free Software Foundation may publish revised and/or new
     versions of the GNU Lesser General Public License from time to
     time.  Such new versions will be similar in spirit to the present
     version, but may differ in detail to address new problems or
     concerns.

     Each version is given a distinguishing version number.  If the
     Library as you received it specifies that a certain numbered
     version of the GNU Lesser General Public License "or any later
     version" applies to it, you have the option of following the terms
     and conditions either of that published version or of any later
     version published by the Free Software Foundation.  If the Library
     as you received it does not specify a version number of the GNU
     Lesser General Public License, you may choose any version of the
     GNU Lesser General Public License ever published by the Free
     Software Foundation.

     If the Library as you received it specifies that a proxy can decide
     whether future versions of the GNU Lesser General Public License
     shall apply, that proxy's public statement of acceptance of any
     version is permanent authorization for you to choose that version
     for the Library.


File: guile-opengl.info,  Node: Function Index,  Prev: GNU Lesser General Public License,  Up: Top

Function Index
**************

 [index ]
* Menu:

* 3dfx-multisample:                      GL Enumerations.   (line    81)
* 3dfx-texture-compression-fxt1:         GL Enumerations.   (line  4011)
* accum-op:                              GL Enumerations.   (line   665)
* add-timer-callback:                    Callback Registration.
                                                            (line    46)
* alpha-function:                        GL Enumerations.   (line   672)
* amd-blend-minmax-factor:               GL Enumerations.   (line  5970)
* amd-compressed-3dc-texture:            GL Enumerations.   (line  4328)
* amd-compressed-atc-texture:            GL Enumerations.   (line  4307)
* amd-debug-output:                      GL Enumerations.   (line  6184)
* amd-depth-clamp-separate:              GL Enumerations.   (line  5977)
* amd-name-gen-delete:                   GL Enumerations.   (line  6199)
* amd-performance-monitor:               GL Enumerations.   (line  5187)
* amd-pinned-memory:                     GL Enumerations.   (line  6207)
* amd-program-binary-z400:               GL Enumerations.   (line  4105)
* amd-query-buffer-object:               GL Enumerations.   (line  6214)
* amd-sample-positions:                  GL Enumerations.   (line  4443)
* amd-sparse-texture:                    GL Enumerations.   (line  6222)
* amd-stencil-operation-extended:        GL Enumerations.   (line  4143)
* amd-vertex-shader-tesselator:          GL Enumerations.   (line  5940)
* angle-depth-texture:                   GL Enumerations.   (line  6350)
* angle-framebuffer-blit:                GL Enumerations.   (line  5401)
* angle-framebuffer-multisample:         GL Enumerations.   (line  5417)
* angle-instanced-arrays:                GL Enumerations.   (line  4728)
* angle-pack-reverse-row-order:          GL Enumerations.   (line  6343)
* angle-texture-compression-dxt-3:       GL Enumerations.   (line  3249)
* angle-texture-compression-dxt-5:       GL Enumerations.   (line  3256)
* angle-texture-usage:                   GL Enumerations.   (line  6336)
* angle-translated-shader-source:        GL Enumerations.   (line  6329)
* apple-aux-depth-stencil:               GL Enumerations.   (line  4900)
* apple-client-storage:                  GL Enumerations.   (line  3781)
* apple-element-array:                   GL Enumerations.   (line  4861)
* apple-fence:                           GL Enumerations.   (line  4854)
* apple-float-pixels:                    GL Enumerations.   (line  1538)
* apple-flush-buffer-range:              GL Enumerations.   (line  4893)
* apple-object-purgeable:                GL Enumerations.   (line  3788)
* apple-rgb-422:                         GL Enumerations.   (line  4914)
* apple-row-bytes:                       GL Enumerations.   (line  4907)
* apple-specular-vector:                 GL Enumerations.   (line  3767)
* apple-sync:                            GL Enumerations.   (line  4945)
* apple-texture-range:                   GL Enumerations.   (line  3810)
* apple-transform-hint:                  GL Enumerations.   (line  3774)
* apple-vertex-array-object:             GL Enumerations.   (line  3803)
* apple-vertex-array-range:              GL Enumerations.   (line  3649)
* apple-vertex-program-evaluators:       GL Enumerations.   (line  4842)
* apple-ycbcr-422:                       GL Enumerations.   (line  3819)
* arb-blend-func-extended:               GL Enumerations.   (line  4699)
* arb-cl-event:                          GL Enumerations.   (line  2966)
* arb-color-buffer-float:                GL Enumerations.   (line  4376)
* arb-compressed-texture-pixel-storage:  GL Enumerations.   (line  6143)
* arb-compute-shader:                    GL Enumerations.   (line   349)
* arb-copy-buffer:                       GL Enumerations.   (line  5886)
* arb-create-context-profile:            GLX Enumerations.  (line   230)
* arb-debug-output:                      GL Enumerations.   (line  2973)
* arb-depth-buffer-float:                GL Enumerations.   (line  5451)
* arb-depth-clamp:                       GL Enumerations.   (line  3893)
* arb-depth-texture:                     GL Enumerations.   (line  2797)
* arb-draw-buffers:                      GL Enumerations.   (line  4399)
* arb-draw-indirect:                     GL Enumerations.   (line  5894)
* arb-es2-compatibility:                 GL Enumerations.   (line  1550)
* arb-es3-compatibility:                 GL Enumerations.   (line  5516)
* arb-explicit-uniform-location:         GL Enumerations.   (line  3009)
* arb-fragment-program:                  GL Enumerations.   (line  3907)
* arb-fragment-shader:                   GL Enumerations.   (line  5045)
* arb-framebuffer-no-attachments:        GL Enumerations.   (line  6311)
* arb-framebuffer-object:                GL Enumerations.   (line   910)
* arb-framebuffer-s-rgb:                 GL Enumerations.   (line  5597)
* arb-geometry-shader-4:                 GL Enumerations.   (line   532)
* arb-get-program-binary:                GL Enumerations.   (line  2991)
* arb-gpu-shader-5:                      GL Enumerations.   (line  4584)
* arb-gpu-shader-fp-64:                  GL Enumerations.   (line  5901)
* arb-half-float-pixel:                  GL Enumerations.   (line  1524)
* arb-half-float-vertex:                 GL Enumerations.   (line  1517)
* arb-instanced-arrays:                  GL Enumerations.   (line  4721)
* arb-internalformat-query:              GL Enumerations.   (line  6322)
* arb-internalformat-query-2:            GL Enumerations.   (line  3016)
* arb-map-buffer-alignment:              GL Enumerations.   (line  6096)
* arb-map-buffer-range:                  GL Enumerations.   (line   280)
* arb-matrix-palette:                    GL Enumerations.   (line  4450)
* arb-multisample:                       GL Enumerations.   (line    58)
* arb-multitexture:                      GL Enumerations.   (line  3417)
* arb-occlusion-query:                   GL Enumerations.   (line  4532)
* arb-occlusion-query-2:                 GL Enumerations.   (line  5244)
* arb-pixel-buffer-object:               GL Enumerations.   (line  4648)
* arb-point-parameters:                  GL Enumerations.   (line  2563)
* arb-point-sprite:                      GL Enumerations.   (line  4511)
* arb-program-interface-query:           GL Enumerations.   (line  6285)
* arb-provoking-vertex:                  GL Enumerations.   (line  5758)
* arb-robustness:                        GL Enumerations.   (line   329)
* arb-sample-shading:                    GL Enumerations.   (line  5251)
* arb-sampler-objects:                   GL Enumerations.   (line  4760)
* arb-seamless-cube-map:                 GL Enumerations.   (line  4487)
* arb-separate-shader-objects:           GL Enumerations.   (line   339)
* arb-shader-atomic-counters:            GL Enumerations.   (line  6255)
* arb-shader-image-load-store:           GL Enumerations.   (line   413)
* arb-shader-objects:                    GL Enumerations.   (line  4959)
* arb-shader-storage-buffer-object:      GL Enumerations.   (line   450)
* arb-shader-subroutine:                 GL Enumerations.   (line  5673)
* arb-shading-language-include:          GL Enumerations.   (line  5589)
* arb-shadow:                            GL Enumerations.   (line  4461)
* arb-stencil-texturing:                 GL Enumerations.   (line  6118)
* arb-sync:                              GL Enumerations.   (line  6132)
* arb-tessellation-shader:               GL Enumerations.   (line   623)
* arb-texture-border-clamp:              GL Enumerations.   (line  2595)
* arb-texture-buffer-object:             GL Enumerations.   (line  5224)
* arb-texture-buffer-range:              GL Enumerations.   (line  6233)
* arb-texture-compression:               GL Enumerations.   (line  3462)
* arb-texture-compression-bptc:          GL Enumerations.   (line  5838)
* arb-texture-compression-rgtc:          GL Enumerations.   (line  5611)
* arb-texture-cube-map:                  GL Enumerations.   (line  3626)
* arb-texture-cube-map-array:            GL Enumerations.   (line  5949)
* arb-texture-env-combine:               GL Enumerations.   (line  3455)
* arb-texture-env-dot-3:                 GL Enumerations.   (line  3994)
* arb-texture-float:                     GL Enumerations.   (line  4351)
* arb-texture-gather:                    GL Enumerations.   (line  5821)
* arb-texture-mirrored-repeat:           GL Enumerations.   (line  3205)
* arb-texture-multisample:               GL Enumerations.   (line  5776)
* arb-texture-rectangle:                 GL Enumerations.   (line  3518)
* arb-texture-rg:                        GL Enumerations.   (line  2957)
* arb-texture-rgb-10-a-2-ui:             GL Enumerations.   (line  6016)
* arb-texture-storage:                   GL Enumerations.   (line  6153)
* arb-texture-swizzle:                   GL Enumerations.   (line  5741)
* arb-texture-view:                      GL Enumerations.   (line  3074)
* arb-timer-query:                       GL Enumerations.   (line  4634)
* arb-transform-feedback-2:              GL Enumerations.   (line  5700)
* arb-transform-feedback-3:              GL Enumerations.   (line  5831)
* arb-transpose-matrix:                  GL Enumerations.   (line  3446)
* arb-uniform-buffer-object:             GL Enumerations.   (line  4869)
* arb-vertex-array-bgra:                 GL Enumerations.   (line  2533)
* arb-vertex-array-object:               GL Enumerations.   (line  3796)
* arb-vertex-attrib-binding:             GL Enumerations.   (line  3064)
* arb-vertex-blend:                      GL Enumerations.   (line  3958)
* arb-vertex-buffer-object:              GL Enumerations.   (line  4202)
* arb-vertex-program:                    GL Enumerations.   (line  3347)
* arb-vertex-shader:                     GL Enumerations.   (line  5002)
* arb-vertex-type-2-10-10-10-rev:        GL Enumerations.   (line  5563)
* arb-viewport-array:                    GL Enumerations.   (line  2999)
* arm-mali-shader-binary:                GL Enumerations.   (line  5911)
* ati-draw-buffers:                      GL Enumerations.   (line  4411)
* ati-element-array:                     GL Enumerations.   (line  4225)
* ati-envmap-bumpmap:                    GL Enumerations.   (line  4243)
* ati-fragment-shader:                   GL Enumerations.   (line  4767)
* ati-meminfo:                           GL Enumerations.   (line  4335)
* ati-pixel-format-float:                GL Enumerations.   (line  4385)
* ati-pn-triangles:                      GL Enumerations.   (line  4315)
* ati-separate-stencil:                  GL Enumerations.   (line  4343)
* ati-text-fragment-shader:              GL Enumerations.   (line  2934)
* ati-texture-env-combine-3:             GL Enumerations.   (line  4135)
* ati-texture-float:                     GL Enumerations.   (line  4365)
* ati-texture-mirror-once:               GL Enumerations.   (line  4120)
* ati-vertex-array-object:               GL Enumerations.   (line  4193)
* ati-vertex-streams:                    GL Enumerations.   (line  4233)
* attrib-mask:                           GL Enumerations.   (line    10)
* begin-mode:                            GL Enumerations.   (line   485)
* blend-equation-mode-ext:               GL Enumerations.   (line   701)
* blending-factor-dest:                  GL Enumerations.   (line   680)
* blending-factor-src:                   GL Enumerations.   (line   690)
* boolean:                               GL Enumerations.   (line   478)
* clear-buffer-mask:                     GL Enumerations.   (line    89)
* client-attrib-mask:                    GL Enumerations.   (line    98)
* clip-plane-name:                       GL Enumerations.   (line  2059)
* color-material-face:                   GL Enumerations.   (line   710)
* color-material-parameter:              GL Enumerations.   (line   717)
* color-pointer-type:                    GL Enumerations.   (line   725)
* color-table-parameter-p-name-sgi:      GL Enumerations.   (line   733)
* color-table-target-sgi:                GL Enumerations.   (line   740)
* convolution-border-mode-ext:           GL Enumerations.   (line   751)
* convolution-parameter-ext:             GL Enumerations.   (line   758)
* convolution-target-ext:                GL Enumerations.   (line   766)
* cull-face-mode:                        GL Enumerations.   (line   773)
* current-window:                        Window Management. (line    44)
* data-type:                             GL Enumerations.   (line  1482)
* depth-function:                        GL Enumerations.   (line   780)
* destroy-window:                        Window Management. (line    46)
* display-mode-possible?:                State Retrieval.   (line    58)
* dmp-shader-binary:                     GL Enumerations.   (line  6241)
* draw-buffer-mode:                      GL Enumerations.   (line   788)
* elapsed-time:                          State Retrieval.   (line    74)
* enable-cap:                            GL Enumerations.   (line   861)
* error-code:                            GL Enumerations.   (line   901)
* ext-422-pixels:                        GL Enumerations.   (line  2511)
* ext-abgr:                              GL Enumerations.   (line  2078)
* ext-bgra:                              GL Enumerations.   (line  2540)
* ext-bindable-uniform:                  GL Enumerations.   (line  5662)
* ext-blend-color:                       GL Enumerations.   (line  2140)
* ext-blend-equation-separate:           GL Enumerations.   (line  2218)
* ext-blend-func-separate:               GL Enumerations.   (line  2495)
* ext-blend-minmax:                      GL Enumerations.   (line  2149)
* ext-blend-subtract:                    GL Enumerations.   (line  2232)
* ext-buffer-age:                        GLX Enumerations.  (line   204)
* ext-cmyka:                             GL Enumerations.   (line  2248)
* ext-color-buffer-half-float:           GL Enumerations.   (line  2941)
* ext-compiled-vertex-array:             GL Enumerations.   (line  2828)
* ext-convolution:                       GL Enumerations.   (line  2256)
* ext-cull-vertex:                       GL Enumerations.   (line  2835)
* ext-debug-label:                       GL Enumerations.   (line  4929)
* ext-depth-bounds-test:                 GL Enumerations.   (line  4612)
* ext-direct-state-access:               GL Enumerations.   (line  5733)
* ext-discard-framebuffer:               GL Enumerations.   (line  1671)
* ext-fog-coord:                         GL Enumerations.   (line  3327)
* ext-framebuffer-blit:                  GL Enumerations.   (line  5392)
* ext-framebuffer-multisample:           GL Enumerations.   (line  5425)
* ext-framebuffer-multisample-blit-scaled: GL Enumerations. (line  6089)
* ext-framebuffer-object:                GL Enumerations.   (line   988)
* ext-framebuffer-s-rgb:                 GL Enumerations.   (line  5604)
* ext-geometry-shader-4:                 GL Enumerations.   (line  5138)
* ext-gpu-shader-4:                      GL Enumerations.   (line  5628)
* ext-histogram:                         GL Enumerations.   (line  2274)
* ext-index-array-formats:               GL Enumerations.   (line  2843)
* ext-index-func:                        GL Enumerations.   (line  2852)
* ext-index-material:                    GL Enumerations.   (line  2859)
* ext-light-texture:                     GL Enumerations.   (line  3162)
* ext-map-buffer-range:                  GL Enumerations.   (line   290)
* ext-multisample:                       GL Enumerations.   (line    68)
* ext-multisampled-render-to-texture:    GL Enumerations.   (line  5530)
* ext-multiview-draw-buffers:            GL Enumerations.   (line  1351)
* ext-occlusion-query-boolean:           GL Enumerations.   (line  4548)
* ext-packed-depth-stencil:              GL Enumerations.   (line  3534)
* ext-packed-float:                      GL Enumerations.   (line  5258)
* ext-packed-pixels:                     GL Enumerations.   (line  2286)
* ext-pixel-buffer-object:               GL Enumerations.   (line  4656)
* ext-pixel-transform:                   GL Enumerations.   (line  3151)
* ext-point-parameters:                  GL Enumerations.   (line  2571)
* ext-polygon-offset:                    GL Enumerations.   (line  2306)
* ext-provoking-vertex:                  GL Enumerations.   (line  5767)
* ext-rescale-normal:                    GL Enumerations.   (line  2314)
* ext-secondary-color:                   GL Enumerations.   (line  3337)
* ext-separate-shader-objects:           GL Enumerations.   (line   367)
* ext-separate-specular-color:           GL Enumerations.   (line  2919)
* ext-shader-framebuffer-fetch:          GL Enumerations.   (line  4938)
* ext-shader-image-load-store:           GL Enumerations.   (line   377)
* ext-shadow-samplers:                   GL Enumerations.   (line  4469)
* ext-shared-texture-palette:            GL Enumerations.   (line  2927)
* ext-stencil-clear-tag:                 GL Enumerations.   (line  4676)
* ext-stencil-two-side:                  GL Enumerations.   (line  4753)
* ext-stencil-wrap:                      GL Enumerations.   (line  3591)
* ext-swap-control:                      GLX Enumerations.  (line   190)
* ext-swap-control-tear:                 GLX Enumerations.  (line   197)
* ext-texture:                           GL Enumerations.   (line  2321)
* ext-texture-3d:                        GL Enumerations.   (line  2351)
* ext-texture-array:                     GL Enumerations.   (line  4477)
* ext-texture-buffer-object:             GL Enumerations.   (line  5234)
* ext-texture-compression-latc:          GL Enumerations.   (line  5288)
* ext-texture-compression-rgtc:          GL Enumerations.   (line  5619)
* ext-texture-compression-s-3-tc:        GL Enumerations.   (line  3241)
* ext-texture-cube-map:                  GL Enumerations.   (line  3605)
* ext-texture-env-combine:               GL Enumerations.   (line  3730)
* ext-texture-env-dot-3:                 GL Enumerations.   (line  4098)
* ext-texture-filter-anisotropic:        GL Enumerations.   (line  3565)
* ext-texture-integer:                   GL Enumerations.   (line  5537)
* ext-texture-lod-bias:                  GL Enumerations.   (line  3557)
* ext-texture-mirror-clamp:              GL Enumerations.   (line  4127)
* ext-texture-object:                    GL Enumerations.   (line  2342)
* ext-texture-perturb-normal:            GL Enumerations.   (line  3760)
* ext-texture-rg:                        GL Enumerations.   (line  1695)
* ext-texture-s-rgb:                     GL Enumerations.   (line  5274)
* ext-texture-s-rgb-decode:              GL Enumerations.   (line  4922)
* ext-texture-shared-exponent:           GL Enumerations.   (line  5266)
* ext-texture-snorm:                     GL Enumerations.   (line  5959)
* ext-texture-swizzle:                   GL Enumerations.   (line  5749)
* ext-texture-type-2-10-10-10-rev:       GL Enumerations.   (line  2298)
* ext-timer-query:                       GL Enumerations.   (line  4641)
* ext-transform-feedback:                GL Enumerations.   (line  5298)
* ext-unpack-subimage:                   GL Enumerations.   (line  1344)
* ext-vertex-array:                      GL Enumerations.   (line  2370)
* ext-vertex-attrib-64-bit:              GL Enumerations.   (line  1506)
* ext-vertex-shader:                     GL Enumerations.   (line  4252)
* ext-vertex-weighting:                  GL Enumerations.   (line  3572)
* ext-x-11-sync-object:                  GL Enumerations.   (line  6111)
* feed-back-token:                       GL Enumerations.   (line  1057)
* feedback-type:                         GL Enumerations.   (line  1050)
* ffd-mask-sgix:                         GL Enumerations.   (line  1066)
* ffd-target-sgix:                       GL Enumerations.   (line  1074)
* fj-shader-binary-gccso:                GL Enumerations.   (line  6248)
* fog-mode:                              GL Enumerations.   (line  1081)
* fog-parameter:                         GL Enumerations.   (line  1088)
* fragment-light-model-parameter-sgix:   GL Enumerations.   (line  1096)
* front-face-direction:                  GL Enumerations.   (line  1106)
* full-screen:                           Window Management. (line    48)
* get-color-table-parameter-p-name-sgi:  GL Enumerations.   (line  1113)
* get-convolution-parameter:             GL Enumerations.   (line  1124)
* get-histogram-parameter-p-name-ext:    GL Enumerations.   (line  1134)
* get-map-query:                         GL Enumerations.   (line  1144)
* get-minmax-parameter-p-name-ext:       GL Enumerations.   (line  1151)
* get-p-name:                            GL Enumerations.   (line  1179)
* get-pixel-map:                         GL Enumerations.   (line  1158)
* get-pointerv-p-name:                   GL Enumerations.   (line  1168)
* get-texture-parameter:                 GL Enumerations.   (line  1367)
* gl-begin:                              OpenGL Operation.  (line     9)
* gl-clear:                              Per Fragment Operations.
                                                            (line    76)
* gl-color:                              OpenGL Operation.  (line    39)
* gl-copy-pixels:                        Per Fragment Operations.
                                                            (line   107)
* gl-depth-range:                        OpenGL Operation.  (line    69)
* gl-disable:                            OpenGL Operation.  (line   124)
* gl-edge-flag:                          OpenGL Operation.  (line    17)
* gl-enable:                             OpenGL Operation.  (line   123)
* gl-fog-coordinate:                     OpenGL Operation.  (line    50)
* gl-frustum:                            OpenGL Operation.  (line   108)
* gl-index:                              OpenGL Operation.  (line    56)
* gl-khr-texture-compression-astc-ldr:   GL Enumerations.   (line  6357)
* gl-load-identity:                      OpenGL Operation.  (line    95)
* gl-load-matrix:                        OpenGL Operation.  (line    77)
* gl-multi-texture-coordinates:          OpenGL Operation.  (line    35)
* gl-multiply-matrix:                    OpenGL Operation.  (line    84)
* gl-normal:                             OpenGL Operation.  (line    45)
* gl-ortho:                              OpenGL Operation.  (line   114)
* gl-rectangle:                          OpenGL Operation.  (line    62)
* gl-rotate:                             OpenGL Operation.  (line    98)
* gl-scale:                              OpenGL Operation.  (line   105)
* gl-secondary-color:                    OpenGL Operation.  (line    53)
* gl-texture-coordinates:                OpenGL Operation.  (line    32)
* gl-translate:                          OpenGL Operation.  (line   102)
* gl-vertex:                             OpenGL Operation.  (line    25)
* gl-vertex-attribute:                   OpenGL Operation.  (line    42)
* gl-viewport:                           OpenGL Operation.  (line    73)
* glAccum:                               Low-Level GL.      (line    34)
* glActiveTexture:                       Low-Level GL.      (line   126)
* glAlphaFunc:                           Low-Level GL.      (line   150)
* glAreTexturesResident:                 Low-Level GL.      (line   221)
* glArrayElement:                        Low-Level GL.      (line   266)
* glAttachShader:                        Low-Level GL.      (line   300)
* glBegin:                               Low-Level GL.      (line   395)
* glBeginQuery:                          Low-Level GL.      (line   348)
* glBindAttribLocation:                  Low-Level GL.      (line   518)
* glBindBuffer:                          Low-Level GL.      (line   590)
* glBindTexture:                         Low-Level GL.      (line   692)
* glBitmap:                              Low-Level GL.      (line   762)
* glBlendColor:                          Low-Level GL.      (line   846)
* glBlendEquation:                       Low-Level GL.      (line   940)
* glBlendEquationSeparate:               Low-Level GL.      (line   865)
* glBlendFunc:                           Low-Level GL.      (line  1150)
* glBlendFuncSeparate:                   Low-Level GL.      (line  1008)
* glBufferData:                          Low-Level GL.      (line  1280)
* glBufferSubData:                       Low-Level GL.      (line  1371)
* glCallList:                            Low-Level GL.      (line  1519)
* glCallLists:                           Low-Level GL.      (line  1416)
* glClear:                               Low-Level GL.      (line  1627)
* glClearAccum:                          Low-Level GL.      (line  1542)
* glClearColor:                          Low-Level GL.      (line  1561)
* glClearDepth:                          Low-Level GL.      (line  1579)
* glClearIndex:                          Low-Level GL.      (line  1594)
* glClearStencil:                        Low-Level GL.      (line  1612)
* glClientActiveTexture:                 Low-Level GL.      (line  1675)
* glClipPlane:                           Low-Level GL.      (line  1696)
* glColor3b:                             Low-Level GL.      (line  2221)
* glColor3bv:                            Low-Level GL.      (line  2237)
* glColor3d:                             Low-Level GL.      (line  2225)
* glColor3dv:                            Low-Level GL.      (line  2241)
* glColor3f:                             Low-Level GL.      (line  2224)
* glColor3fv:                            Low-Level GL.      (line  2240)
* glColor3i:                             Low-Level GL.      (line  2223)
* glColor3iv:                            Low-Level GL.      (line  2239)
* glColor3s:                             Low-Level GL.      (line  2222)
* glColor3sv:                            Low-Level GL.      (line  2238)
* glColor3ub:                            Low-Level GL.      (line  2226)
* glColor3ubv:                           Low-Level GL.      (line  2242)
* glColor3ui:                            Low-Level GL.      (line  2228)
* glColor3uiv:                           Low-Level GL.      (line  2244)
* glColor3us:                            Low-Level GL.      (line  2227)
* glColor3usv:                           Low-Level GL.      (line  2243)
* glColor4b:                             Low-Level GL.      (line  2229)
* glColor4bv:                            Low-Level GL.      (line  2245)
* glColor4d:                             Low-Level GL.      (line  2233)
* glColor4dv:                            Low-Level GL.      (line  2249)
* glColor4f:                             Low-Level GL.      (line  2232)
* glColor4fv:                            Low-Level GL.      (line  2248)
* glColor4i:                             Low-Level GL.      (line  2231)
* glColor4iv:                            Low-Level GL.      (line  2247)
* glColor4s:                             Low-Level GL.      (line  2230)
* glColor4sv:                            Low-Level GL.      (line  2246)
* glColor4ub:                            Low-Level GL.      (line  2234)
* glColor4ubv:                           Low-Level GL.      (line  2250)
* glColor4ui:                            Low-Level GL.      (line  2236)
* glColor4uiv:                           Low-Level GL.      (line  2252)
* glColor4us:                            Low-Level GL.      (line  2235)
* glColor4usv:                           Low-Level GL.      (line  2251)
* glColorMask:                           Low-Level GL.      (line  1741)
* glColorMaterial:                       Low-Level GL.      (line  1767)
* glColorPointer:                        Low-Level GL.      (line  1799)
* glColorSubTable:                       Low-Level GL.      (line  1854)
* glColorTable:                          Low-Level GL.      (line  1976)
* glColorTableParameterfv:               Low-Level GL.      (line  1933)
* glColorTableParameteriv:               Low-Level GL.      (line  1934)
* glCompileShader:                       Low-Level GL.      (line  2293)
* glCompressedTexImage1D:                Low-Level GL.      (line  2324)
* glCompressedTexImage2D:                Low-Level GL.      (line  2419)
* glCompressedTexImage3D:                Low-Level GL.      (line  2530)
* glCompressedTexSubImage1D:             Low-Level GL.      (line  2638)
* glCompressedTexSubImage2D:             Low-Level GL.      (line  2724)
* glCompressedTexSubImage3D:             Low-Level GL.      (line  2826)
* glConvolutionFilter1D:                 Low-Level GL.      (line  2925)
* glConvolutionFilter2D:                 Low-Level GL.      (line  3083)
* glConvolutionParameterf:               Low-Level GL.      (line  3251)
* glConvolutionParameterfv:              Low-Level GL.      (line  3253)
* glConvolutionParameteri:               Low-Level GL.      (line  3252)
* glConvolutionParameteriv:              Low-Level GL.      (line  3254)
* glCopyColorSubTable:                   Low-Level GL.      (line  3325)
* glCopyColorTable:                      Low-Level GL.      (line  3365)
* glCopyConvolutionFilter1D:             Low-Level GL.      (line  3466)
* glCopyConvolutionFilter2D:             Low-Level GL.      (line  3576)
* glCopyPixels:                          Low-Level GL.      (line  3695)
* glCopyTexImage1D:                      Low-Level GL.      (line  3855)
* glCopyTexImage2D:                      Low-Level GL.      (line  3962)
* glCopyTexSubImage1D:                   Low-Level GL.      (line  4080)
* glCopyTexSubImage2D:                   Low-Level GL.      (line  4143)
* glCopyTexSubImage3D:                   Low-Level GL.      (line  4235)
* glCreateProgram:                       Low-Level GL.      (line  4323)
* glCreateShader:                        Low-Level GL.      (line  4353)
* glCullFace:                            Low-Level GL.      (line  4385)
* glDeleteBuffers:                       Low-Level GL.      (line  4410)
* glDeleteLists:                         Low-Level GL.      (line  4435)
* glDeleteProgram:                       Low-Level GL.      (line  4461)
* glDeleteQueries:                       Low-Level GL.      (line  4492)
* glDeleteShader:                        Low-Level GL.      (line  4515)
* glDeleteTextures:                      Low-Level GL.      (line  4543)
* glDepthFunc:                           Low-Level GL.      (line  4567)
* glDepthMask:                           Low-Level GL.      (line  4624)
* glDepthRange:                          Low-Level GL.      (line  4642)
* glDetachShader:                        Low-Level GL.      (line  4670)
* glDisable:                             Low-Level GL.      (line  5621)
* glDisableClientState:                  Low-Level GL.      (line  5520)
* glDisableVertexAttribArray:            Low-Level GL.      (line  5595)
* glDrawArrays:                          Low-Level GL.      (line  4705)
* glDrawBuffer:                          Low-Level GL.      (line  4831)
* glDrawBuffers:                         Low-Level GL.      (line  4752)
* glDrawElements:                        Low-Level GL.      (line  4916)
* glDrawPixels:                          Low-Level GL.      (line  4969)
* glDrawRangeElements:                   Low-Level GL.      (line  5381)
* glEdgeFlag:                            Low-Level GL.      (line  5494)
* glEdgeFlagPointer:                     Low-Level GL.      (line  5456)
* glEdgeFlagv:                           Low-Level GL.      (line  5495)
* glEnable:                              Low-Level GL.      (line  5620)
* glEnableClientState:                   Low-Level GL.      (line  5519)
* glEnableVertexAttribArray:             Low-Level GL.      (line  5594)
* glEnd:                                 Low-Level GL.      (line   396)
* glEndList:                             Low-Level GL.      (line 14277)
* glEndQuery:                            Low-Level GL.      (line   349)
* glEvalCoord1d:                         Low-Level GL.      (line  6031)
* glEvalCoord1dv:                        Low-Level GL.      (line  6035)
* glEvalCoord1f:                         Low-Level GL.      (line  6030)
* glEvalCoord1fv:                        Low-Level GL.      (line  6034)
* glEvalCoord2d:                         Low-Level GL.      (line  6033)
* glEvalCoord2dv:                        Low-Level GL.      (line  6037)
* glEvalCoord2f:                         Low-Level GL.      (line  6032)
* glEvalCoord2fv:                        Low-Level GL.      (line  6036)
* glEvalMesh1:                           Low-Level GL.      (line  6104)
* glEvalMesh2:                           Low-Level GL.      (line  6105)
* glEvalPoint1:                          Low-Level GL.      (line  6203)
* glEvalPoint2:                          Low-Level GL.      (line  6204)
* glFeedbackBuffer:                      Low-Level GL.      (line  6241)
* glFinish:                              Low-Level GL.      (line  6373)
* glFlush:                               Low-Level GL.      (line  6385)
* glFogCoordd:                           Low-Level GL.      (line  6453)
* glFogCoorddv:                          Low-Level GL.      (line  6455)
* glFogCoordf:                           Low-Level GL.      (line  6454)
* glFogCoordfv:                          Low-Level GL.      (line  6456)
* glFogCoordPointer:                     Low-Level GL.      (line  6406)
* glFogf:                                Low-Level GL.      (line  6466)
* glFogfv:                               Low-Level GL.      (line  6468)
* glFogi:                                Low-Level GL.      (line  6467)
* glFogiv:                               Low-Level GL.      (line  6469)
* glFrontFace:                           Low-Level GL.      (line  6570)
* glFrustum:                             Low-Level GL.      (line  6603)
* glGenBuffers:                          Low-Level GL.      (line  6655)
* glGenLists:                            Low-Level GL.      (line  6683)
* glGenQueries:                          Low-Level GL.      (line  6702)
* glGenTextures:                         Low-Level GL.      (line  6730)
* glGetActiveAttrib:                     Low-Level GL.      (line  6759)
* glGetActiveUniform:                    Low-Level GL.      (line  6859)
* glGetAttachedShaders:                  Low-Level GL.      (line  6987)
* glGetAttribLocation:                   Low-Level GL.      (line  7032)
* glGetBooleanv:                         Low-Level GL.      (line  9813)
* glGetBufferParameteriv:                Low-Level GL.      (line  7076)
* glGetBufferPointerv:                   Low-Level GL.      (line  7123)
* glGetBufferSubData:                    Low-Level GL.      (line  7155)
* glGetClipPlane:                        Low-Level GL.      (line  7200)
* glGetColorTable:                       Low-Level GL.      (line  7303)
* glGetColorTableParameterfv:            Low-Level GL.      (line  7224)
* glGetColorTableParameteriv:            Low-Level GL.      (line  7225)
* glGetCompressedTexImage:               Low-Level GL.      (line  7407)
* glGetConvolutionFilter:                Low-Level GL.      (line  7474)
* glGetConvolutionParameterfv:           Low-Level GL.      (line  7577)
* glGetConvolutionParameteriv:           Low-Level GL.      (line  7578)
* glGetDoublev:                          Low-Level GL.      (line  9814)
* glGetError:                            Low-Level GL.      (line  7659)
* glGetFloatv:                           Low-Level GL.      (line  9815)
* glGetHistogram:                        Low-Level GL.      (line  7796)
* glGetHistogramParameterfv:             Low-Level GL.      (line  7734)
* glGetHistogramParameteriv:             Low-Level GL.      (line  7735)
* glGetIntegerv:                         Low-Level GL.      (line  9816)
* glGetLightfv:                          Low-Level GL.      (line  7900)
* glGetLightiv:                          Low-Level GL.      (line  7901)
* glGetMapdv:                            Low-Level GL.      (line  8031)
* glGetMapfv:                            Low-Level GL.      (line  8032)
* glGetMapiv:                            Low-Level GL.      (line  8033)
* glGetMaterialfv:                       Low-Level GL.      (line  8098)
* glGetMaterialiv:                       Low-Level GL.      (line  8099)
* glGetMinmax:                           Low-Level GL.      (line  8220)
* glGetMinmaxParameterfv:                Low-Level GL.      (line  8185)
* glGetMinmaxParameteriv:                Low-Level GL.      (line  8186)
* glGetPixelMapfv:                       Low-Level GL.      (line  8334)
* glGetPixelMapuiv:                      Low-Level GL.      (line  8335)
* glGetPixelMapusv:                      Low-Level GL.      (line  8336)
* glGetPointerv:                         Low-Level GL.      (line  8405)
* glGetPolygonStipple:                   Low-Level GL.      (line  8434)
* glGetProgramInfoLog:                   Low-Level GL.      (line  8466)
* glGetProgramiv:                        Low-Level GL.      (line  8518)
* glGetQueryiv:                          Low-Level GL.      (line  8603)
* glGetQueryObjectiv:                    Low-Level GL.      (line  8641)
* glGetQueryObjectuiv:                   Low-Level GL.      (line  8642)
* glGetSeparableFilter:                  Low-Level GL.      (line  8685)
* glGetShaderInfoLog:                    Low-Level GL.      (line  8798)
* glGetShaderiv:                         Low-Level GL.      (line  8893)
* glGetShaderSource:                     Low-Level GL.      (line  8848)
* glGetString:                           Low-Level GL.      (line  8949)
* glGetTexEnvfv:                         Low-Level GL.      (line  9015)
* glGetTexEnviv:                         Low-Level GL.      (line  9016)
* glGetTexGendv:                         Low-Level GL.      (line  9160)
* glGetTexGenfv:                         Low-Level GL.      (line  9161)
* glGetTexGeniv:                         Low-Level GL.      (line  9162)
* glGetTexImage:                         Low-Level GL.      (line  9211)
* glGetTexLevelParameterfv:              Low-Level GL.      (line  9334)
* glGetTexLevelParameteriv:              Low-Level GL.      (line  9335)
* glGetTexParameterfv:                   Low-Level GL.      (line  9466)
* glGetTexParameteriv:                   Low-Level GL.      (line  9467)
* glGetUniformfv:                        Low-Level GL.      (line  9635)
* glGetUniformiv:                        Low-Level GL.      (line  9636)
* glGetUniformLocation:                  Low-Level GL.      (line  9581)
* glGetVertexAttribdv:                   Low-Level GL.      (line  9720)
* glGetVertexAttribfv:                   Low-Level GL.      (line  9721)
* glGetVertexAttribiv:                   Low-Level GL.      (line  9722)
* glGetVertexAttribPointerv:             Low-Level GL.      (line  9689)
* glHint:                                Low-Level GL.      (line 12024)
* glHistogram:                           Low-Level GL.      (line 12128)
* glIndexd:                              Low-Level GL.      (line 12278)
* glIndexdv:                             Low-Level GL.      (line 12283)
* glIndexf:                              Low-Level GL.      (line 12277)
* glIndexfv:                             Low-Level GL.      (line 12282)
* glIndexi:                              Low-Level GL.      (line 12276)
* glIndexiv:                             Low-Level GL.      (line 12281)
* glIndexMask:                           Low-Level GL.      (line 12206)
* glIndexPointer:                        Low-Level GL.      (line 12229)
* glIndexs:                              Low-Level GL.      (line 12275)
* glIndexsv:                             Low-Level GL.      (line 12280)
* glIndexub:                             Low-Level GL.      (line 12279)
* glIndexubv:                            Low-Level GL.      (line 12284)
* glInitNames:                           Low-Level GL.      (line 12304)
* glInterleavedArrays:                   Low-Level GL.      (line 12320)
* glIsBuffer:                            Low-Level GL.      (line 12363)
* glIsEnabled:                           Low-Level GL.      (line 12382)
* glIsList:                              Low-Level GL.      (line 12622)
* glIsProgram:                           Low-Level GL.      (line 12639)
* glIsQuery:                             Low-Level GL.      (line 12655)
* glIsShader:                            Low-Level GL.      (line 12674)
* glIsTexture:                           Low-Level GL.      (line 12690)
* glLightf:                              Low-Level GL.      (line 12817)
* glLightfv:                             Low-Level GL.      (line 12819)
* glLighti:                              Low-Level GL.      (line 12818)
* glLightiv:                             Low-Level GL.      (line 12820)
* glLightModelf:                         Low-Level GL.      (line 12708)
* glLightModelfv:                        Low-Level GL.      (line 12710)
* glLightModeli:                         Low-Level GL.      (line 12709)
* glLightModeliv:                        Low-Level GL.      (line 12711)
* glLineStipple:                         Low-Level GL.      (line 12970)
* glLineWidth:                           Low-Level GL.      (line 13017)
* glLinkProgram:                         Low-Level GL.      (line 13064)
* glListBase:                            Low-Level GL.      (line 13171)
* glLoadIdentity:                        Low-Level GL.      (line 13187)
* glLoadMatrixd:                         Low-Level GL.      (line 13202)
* glLoadMatrixf:                         Low-Level GL.      (line 13203)
* glLoadName:                            Low-Level GL.      (line 13234)
* glLoadTransposeMatrixd:                Low-Level GL.      (line 13259)
* glLoadTransposeMatrixf:                Low-Level GL.      (line 13260)
* glLogicOp:                             Low-Level GL.      (line 13296)
* glMap1d:                               Low-Level GL.      (line 13381)
* glMap1f:                               Low-Level GL.      (line 13380)
* glMap2d:                               Low-Level GL.      (line 13536)
* glMap2f:                               Low-Level GL.      (line 13534)
* glMapBuffer:                           Low-Level GL.      (line 13726)
* glMapGrid1d:                           Low-Level GL.      (line 13801)
* glMapGrid1f:                           Low-Level GL.      (line 13802)
* glMapGrid2d:                           Low-Level GL.      (line 13803)
* glMapGrid2f:                           Low-Level GL.      (line 13804)
* glMaterialf:                           Low-Level GL.      (line 13862)
* glMaterialfv:                          Low-Level GL.      (line 13864)
* glMateriali:                           Low-Level GL.      (line 13863)
* glMaterialiv:                          Low-Level GL.      (line 13865)
* glMatrixMode:                          Low-Level GL.      (line 13968)
* glMinmax:                              Low-Level GL.      (line 14007)
* glMultiDrawArrays:                     Low-Level GL.      (line 14068)
* glMultiDrawElements:                   Low-Level GL.      (line 14122)
* glMultiTexCoord1d:                     Low-Level GL.      (line 14178)
* glMultiTexCoord1dv:                    Low-Level GL.      (line 14194)
* glMultiTexCoord1f:                     Low-Level GL.      (line 14177)
* glMultiTexCoord1fv:                    Low-Level GL.      (line 14193)
* glMultiTexCoord1i:                     Low-Level GL.      (line 14176)
* glMultiTexCoord1iv:                    Low-Level GL.      (line 14192)
* glMultiTexCoord1s:                     Low-Level GL.      (line 14175)
* glMultiTexCoord1sv:                    Low-Level GL.      (line 14191)
* glMultiTexCoord2d:                     Low-Level GL.      (line 14182)
* glMultiTexCoord2dv:                    Low-Level GL.      (line 14198)
* glMultiTexCoord2f:                     Low-Level GL.      (line 14181)
* glMultiTexCoord2fv:                    Low-Level GL.      (line 14197)
* glMultiTexCoord2i:                     Low-Level GL.      (line 14180)
* glMultiTexCoord2iv:                    Low-Level GL.      (line 14196)
* glMultiTexCoord2s:                     Low-Level GL.      (line 14179)
* glMultiTexCoord2sv:                    Low-Level GL.      (line 14195)
* glMultiTexCoord3d:                     Low-Level GL.      (line 14186)
* glMultiTexCoord3dv:                    Low-Level GL.      (line 14202)
* glMultiTexCoord3f:                     Low-Level GL.      (line 14185)
* glMultiTexCoord3fv:                    Low-Level GL.      (line 14201)
* glMultiTexCoord3i:                     Low-Level GL.      (line 14184)
* glMultiTexCoord3iv:                    Low-Level GL.      (line 14200)
* glMultiTexCoord3s:                     Low-Level GL.      (line 14183)
* glMultiTexCoord3sv:                    Low-Level GL.      (line 14199)
* glMultiTexCoord4d:                     Low-Level GL.      (line 14190)
* glMultiTexCoord4dv:                    Low-Level GL.      (line 14206)
* glMultiTexCoord4f:                     Low-Level GL.      (line 14189)
* glMultiTexCoord4fv:                    Low-Level GL.      (line 14205)
* glMultiTexCoord4i:                     Low-Level GL.      (line 14188)
* glMultiTexCoord4iv:                    Low-Level GL.      (line 14204)
* glMultiTexCoord4s:                     Low-Level GL.      (line 14187)
* glMultiTexCoord4sv:                    Low-Level GL.      (line 14203)
* glMultMatrixd:                         Low-Level GL.      (line 14236)
* glMultMatrixf:                         Low-Level GL.      (line 14237)
* glMultTransposeMatrixd:                Low-Level GL.      (line 14255)
* glMultTransposeMatrixf:                Low-Level GL.      (line 14256)
* glNewList:                             Low-Level GL.      (line 14276)
* glNormal3b:                            Low-Level GL.      (line 14404)
* glNormal3bv:                           Low-Level GL.      (line 14409)
* glNormal3d:                            Low-Level GL.      (line 14405)
* glNormal3dv:                           Low-Level GL.      (line 14410)
* glNormal3f:                            Low-Level GL.      (line 14406)
* glNormal3fv:                           Low-Level GL.      (line 14411)
* glNormal3i:                            Low-Level GL.      (line 14407)
* glNormal3iv:                           Low-Level GL.      (line 14412)
* glNormal3s:                            Low-Level GL.      (line 14408)
* glNormal3sv:                           Low-Level GL.      (line 14413)
* glNormalPointer:                       Low-Level GL.      (line 14357)
* glOrtho:                               Low-Level GL.      (line 14440)
* glPassThrough:                         Low-Level GL.      (line 14489)
* glPixelMapfv:                          Low-Level GL.      (line 14515)
* glPixelMapuiv:                         Low-Level GL.      (line 14516)
* glPixelMapusv:                         Low-Level GL.      (line 14517)
* glPixelStoref:                         Low-Level GL.      (line 14691)
* glPixelStorei:                         Low-Level GL.      (line 14692)
* glPixelTransferf:                      Low-Level GL.      (line 14995)
* glPixelTransferi:                      Low-Level GL.      (line 14996)
* glPixelZoom:                           Low-Level GL.      (line 15286)
* glPointParameterf:                     Low-Level GL.      (line 15314)
* glPointParameterfv:                    Low-Level GL.      (line 15316)
* glPointParameteri:                     Low-Level GL.      (line 15315)
* glPointParameteriv:                    Low-Level GL.      (line 15317)
* glPointSize:                           Low-Level GL.      (line 15371)
* glPolygonMode:                         Low-Level GL.      (line 15459)
* glPolygonOffset:                       Low-Level GL.      (line 15511)
* glPolygonStipple:                      Low-Level GL.      (line 15541)
* glPopAttrib:                           Low-Level GL.      (line 15639)
* glPopClientAttrib:                     Low-Level GL.      (line 16145)
* glPopMatrix:                           Low-Level GL.      (line 16184)
* glPopName:                             Low-Level GL.      (line 16219)
* glPrioritizeTextures:                  Low-Level GL.      (line 15590)
* glPushAttrib:                          Low-Level GL.      (line 15638)
* glPushClientAttrib:                    Low-Level GL.      (line 16144)
* glPushMatrix:                          Low-Level GL.      (line 16183)
* glPushName:                            Low-Level GL.      (line 16218)
* glRasterPos2d:                         Low-Level GL.      (line 16257)
* glRasterPos2dv:                        Low-Level GL.      (line 16269)
* glRasterPos2f:                         Low-Level GL.      (line 16256)
* glRasterPos2fv:                        Low-Level GL.      (line 16268)
* glRasterPos2i:                         Low-Level GL.      (line 16255)
* glRasterPos2iv:                        Low-Level GL.      (line 16267)
* glRasterPos2s:                         Low-Level GL.      (line 16254)
* glRasterPos2sv:                        Low-Level GL.      (line 16266)
* glRasterPos3d:                         Low-Level GL.      (line 16261)
* glRasterPos3dv:                        Low-Level GL.      (line 16273)
* glRasterPos3f:                         Low-Level GL.      (line 16260)
* glRasterPos3fv:                        Low-Level GL.      (line 16272)
* glRasterPos3i:                         Low-Level GL.      (line 16259)
* glRasterPos3iv:                        Low-Level GL.      (line 16271)
* glRasterPos3s:                         Low-Level GL.      (line 16258)
* glRasterPos3sv:                        Low-Level GL.      (line 16270)
* glRasterPos4d:                         Low-Level GL.      (line 16265)
* glRasterPos4dv:                        Low-Level GL.      (line 16277)
* glRasterPos4f:                         Low-Level GL.      (line 16264)
* glRasterPos4fv:                        Low-Level GL.      (line 16276)
* glRasterPos4i:                         Low-Level GL.      (line 16263)
* glRasterPos4iv:                        Low-Level GL.      (line 16275)
* glRasterPos4s:                         Low-Level GL.      (line 16262)
* glRasterPos4sv:                        Low-Level GL.      (line 16274)
* glReadBuffer:                          Low-Level GL.      (line 16342)
* glReadPixels:                          Low-Level GL.      (line 16381)
* glRectd:                               Low-Level GL.      (line 16627)
* glRectdv:                              Low-Level GL.      (line 16631)
* glRectf:                               Low-Level GL.      (line 16628)
* glRectfv:                              Low-Level GL.      (line 16632)
* glRecti:                               Low-Level GL.      (line 16629)
* glRectiv:                              Low-Level GL.      (line 16633)
* glRects:                               Low-Level GL.      (line 16630)
* glRectsv:                              Low-Level GL.      (line 16634)
* glRenderMode:                          Low-Level GL.      (line 16668)
* glResetHistogram:                      Low-Level GL.      (line 16734)
* glResetMinmax:                         Low-Level GL.      (line 16749)
* glRotated:                             Low-Level GL.      (line 16766)
* glRotatef:                             Low-Level GL.      (line 16767)
* glSampleCoverage:                      Low-Level GL.      (line 16801)
* glScaled:                              Low-Level GL.      (line 16840)
* glScalef:                              Low-Level GL.      (line 16841)
* glScissor:                             Low-Level GL.      (line 16871)
* glSecondaryColor3b:                    Low-Level GL.      (line 16963)
* glSecondaryColor3bv:                   Low-Level GL.      (line 16971)
* glSecondaryColor3d:                    Low-Level GL.      (line 16967)
* glSecondaryColor3dv:                   Low-Level GL.      (line 16975)
* glSecondaryColor3f:                    Low-Level GL.      (line 16966)
* glSecondaryColor3fv:                   Low-Level GL.      (line 16974)
* glSecondaryColor3i:                    Low-Level GL.      (line 16965)
* glSecondaryColor3iv:                   Low-Level GL.      (line 16973)
* glSecondaryColor3s:                    Low-Level GL.      (line 16964)
* glSecondaryColor3sv:                   Low-Level GL.      (line 16972)
* glSecondaryColor3ub:                   Low-Level GL.      (line 16968)
* glSecondaryColor3ubv:                  Low-Level GL.      (line 16976)
* glSecondaryColor3ui:                   Low-Level GL.      (line 16970)
* glSecondaryColor3uiv:                  Low-Level GL.      (line 16978)
* glSecondaryColor3us:                   Low-Level GL.      (line 16969)
* glSecondaryColor3usv:                  Low-Level GL.      (line 16977)
* glSecondaryColorPointer:               Low-Level GL.      (line 16909)
* glSelectBuffer:                        Low-Level GL.      (line 17022)
* glSeparableFilter2D:                   Low-Level GL.      (line 17087)
* glShadeModel:                          Low-Level GL.      (line 17260)
* glShaderSource:                        Low-Level GL.      (line 17318)
* glStencilFunc:                         Low-Level GL.      (line 17458)
* glStencilFuncSeparate:                 Low-Level GL.      (line 17362)
* glStencilMask:                         Low-Level GL.      (line 17582)
* glStencilMaskSeparate:                 Low-Level GL.      (line 17549)
* glStencilOp:                           Low-Level GL.      (line 17717)
* glStencilOpSeparate:                   Low-Level GL.      (line 17610)
* glTexCoord1d:                          Low-Level GL.      (line 17874)
* glTexCoord1dv:                         Low-Level GL.      (line 17890)
* glTexCoord1f:                          Low-Level GL.      (line 17873)
* glTexCoord1fv:                         Low-Level GL.      (line 17889)
* glTexCoord1i:                          Low-Level GL.      (line 17872)
* glTexCoord1iv:                         Low-Level GL.      (line 17888)
* glTexCoord1s:                          Low-Level GL.      (line 17871)
* glTexCoord1sv:                         Low-Level GL.      (line 17887)
* glTexCoord2d:                          Low-Level GL.      (line 17878)
* glTexCoord2dv:                         Low-Level GL.      (line 17894)
* glTexCoord2f:                          Low-Level GL.      (line 17877)
* glTexCoord2fv:                         Low-Level GL.      (line 17893)
* glTexCoord2i:                          Low-Level GL.      (line 17876)
* glTexCoord2iv:                         Low-Level GL.      (line 17892)
* glTexCoord2s:                          Low-Level GL.      (line 17875)
* glTexCoord2sv:                         Low-Level GL.      (line 17891)
* glTexCoord3d:                          Low-Level GL.      (line 17882)
* glTexCoord3dv:                         Low-Level GL.      (line 17898)
* glTexCoord3f:                          Low-Level GL.      (line 17881)
* glTexCoord3fv:                         Low-Level GL.      (line 17897)
* glTexCoord3i:                          Low-Level GL.      (line 17880)
* glTexCoord3iv:                         Low-Level GL.      (line 17896)
* glTexCoord3s:                          Low-Level GL.      (line 17879)
* glTexCoord3sv:                         Low-Level GL.      (line 17895)
* glTexCoord4d:                          Low-Level GL.      (line 17886)
* glTexCoord4dv:                         Low-Level GL.      (line 17902)
* glTexCoord4f:                          Low-Level GL.      (line 17885)
* glTexCoord4fv:                         Low-Level GL.      (line 17901)
* glTexCoord4i:                          Low-Level GL.      (line 17884)
* glTexCoord4iv:                         Low-Level GL.      (line 17900)
* glTexCoord4s:                          Low-Level GL.      (line 17883)
* glTexCoord4sv:                         Low-Level GL.      (line 17899)
* glTexCoordPointer:                     Low-Level GL.      (line 17816)
* glTexEnvf:                             Low-Level GL.      (line 17923)
* glTexEnvfv:                            Low-Level GL.      (line 17925)
* glTexEnvi:                             Low-Level GL.      (line 17924)
* glTexEnviv:                            Low-Level GL.      (line 17926)
* glTexGend:                             Low-Level GL.      (line 18269)
* glTexGendv:                            Low-Level GL.      (line 18272)
* glTexGenf:                             Low-Level GL.      (line 18268)
* glTexGenfv:                            Low-Level GL.      (line 18271)
* glTexGeni:                             Low-Level GL.      (line 18267)
* glTexGeniv:                            Low-Level GL.      (line 18270)
* glTexImage1D:                          Low-Level GL.      (line 18380)
* glTexImage2D:                          Low-Level GL.      (line 18706)
* glTexImage3D:                          Low-Level GL.      (line 19060)
* glTexParameterf:                       Low-Level GL.      (line 19380)
* glTexParameterfv:                      Low-Level GL.      (line 19382)
* glTexParameteri:                       Low-Level GL.      (line 19381)
* glTexParameteriv:                      Low-Level GL.      (line 19383)
* glTexSubImage1D:                       Low-Level GL.      (line 19660)
* glTexSubImage2D:                       Low-Level GL.      (line 19775)
* glTexSubImage3D:                       Low-Level GL.      (line 19908)
* glTranslated:                          Low-Level GL.      (line 20042)
* glTranslatef:                          Low-Level GL.      (line 20043)
* glu-perspective:                       Matrix Manipulation.
                                                            (line     6)
* gluBeginCurve:                         Low-Level GLU.     (line    19)
* gluBeginPolygon:                       Low-Level GLU.     (line    40)
* gluBeginSurface:                       Low-Level GLU.     (line    59)
* gluBeginTrim:                          Low-Level GLU.     (line    84)
* gluBuild1DMipmapLevels:                Low-Level GLU.     (line   142)
* gluBuild1DMipmaps:                     Low-Level GLU.     (line   274)
* gluBuild2DMipmapLevels:                Low-Level GLU.     (line   396)
* gluBuild2DMipmaps:                     Low-Level GLU.     (line   532)
* gluBuild3DMipmapLevels:                Low-Level GLU.     (line   665)
* gluBuild3DMipmaps:                     Low-Level GLU.     (line   802)
* gluCheckExtension:                     Low-Level GLU.     (line   935)
* gluCylinder:                           Low-Level GLU.     (line   953)
* gluDeleteNurbsRenderer:                Low-Level GLU.     (line   991)
* gluDeleteQuadric:                      Low-Level GLU.     (line  1002)
* gluDeleteTess:                         Low-Level GLU.     (line  1012)
* gluDisk:                               Low-Level GLU.     (line  1021)
* gluEndCurve:                           Low-Level GLU.     (line    20)
* gluEndPolygon:                         Low-Level GLU.     (line    41)
* gluEndSurface:                         Low-Level GLU.     (line    60)
* gluEndTrim:                            Low-Level GLU.     (line    85)
* gluErrorString:                        Low-Level GLU.     (line  1057)
* gluGetNurbsProperty:                   Low-Level GLU.     (line  1075)
* gluGetString:                          Low-Level GLU.     (line  1098)
* gluGetTessProperty:                    Low-Level GLU.     (line  1130)
* gluLoadSamplingMatrices:               Low-Level GLU.     (line  1150)
* gluLookAt:                             Low-Level GLU.     (line  1182)
* gluNewNurbsRenderer:                   Low-Level GLU.     (line  1236)
* gluNewQuadric:                         Low-Level GLU.     (line  1244)
* gluNewTess:                            Low-Level GLU.     (line  1252)
* gluNextContour:                        Low-Level GLU.     (line  1260)
* glUniform1f:                           Low-Level GL.      (line 20068)
* glUniform1fv:                          Low-Level GL.      (line 20076)
* glUniform1i:                           Low-Level GL.      (line 20072)
* glUniform1iv:                          Low-Level GL.      (line 20080)
* glUniform2f:                           Low-Level GL.      (line 20069)
* glUniform2fv:                          Low-Level GL.      (line 20077)
* glUniform2i:                           Low-Level GL.      (line 20073)
* glUniform2iv:                          Low-Level GL.      (line 20081)
* glUniform3f:                           Low-Level GL.      (line 20070)
* glUniform3fv:                          Low-Level GL.      (line 20078)
* glUniform3i:                           Low-Level GL.      (line 20074)
* glUniform3iv:                          Low-Level GL.      (line 20082)
* glUniform4f:                           Low-Level GL.      (line 20071)
* glUniform4fv:                          Low-Level GL.      (line 20079)
* glUniform4i:                           Low-Level GL.      (line 20075)
* glUniform4iv:                          Low-Level GL.      (line 20083)
* glUniformMatrix2fv:                    Low-Level GL.      (line 20084)
* glUniformMatrix2x3fv:                  Low-Level GL.      (line 20087)
* glUniformMatrix2x4fv:                  Low-Level GL.      (line 20089)
* glUniformMatrix3fv:                    Low-Level GL.      (line 20085)
* glUniformMatrix3x2fv:                  Low-Level GL.      (line 20088)
* glUniformMatrix3x4fv:                  Low-Level GL.      (line 20091)
* glUniformMatrix4fv:                    Low-Level GL.      (line 20086)
* glUniformMatrix4x2fv:                  Low-Level GL.      (line 20090)
* glUniformMatrix4x3fv:                  Low-Level GL.      (line 20092)
* glUnmapBuffer:                         Low-Level GL.      (line 13727)
* gluNurbsCallback:                      Low-Level GLU.     (line  1348)
* gluNurbsCallbackData:                  Low-Level GLU.     (line  1333)
* gluNurbsCallbackDataEXT:               Low-Level GLU.     (line  1318)
* gluNurbsCurve:                         Low-Level GLU.     (line  1552)
* gluNurbsProperty:                      Low-Level GLU.     (line  1608)
* gluNurbsSurface:                       Low-Level GLU.     (line  1754)
* gluOrtho2D:                            Low-Level GLU.     (line  1831)
* gluPartialDisk:                        Low-Level GLU.     (line  1847)
* gluPerspective:                        Low-Level GLU.     (line  1897)
* gluPickMatrix:                         Low-Level GLU.     (line  1937)
* gluProject:                            Low-Level GLU.     (line  1976)
* gluPwlCurve:                           Low-Level GLU.     (line  2022)
* gluQuadricCallback:                    Low-Level GLU.     (line  2058)
* gluQuadricDrawStyle:                   Low-Level GLU.     (line  2084)
* gluQuadricNormals:                     Low-Level GLU.     (line  2112)
* gluQuadricOrientation:                 Low-Level GLU.     (line  2135)
* gluQuadricTexture:                     Low-Level GLU.     (line  2159)
* gluScaleImage:                         Low-Level GLU.     (line  2178)
* glUseProgram:                          Low-Level GL.      (line 20205)
* gluSphere:                             Low-Level GLU.     (line  2277)
* glut-main-loop:                        Beginning Event Processing.
                                                            (line     6)
* gluTessBeginContour:                   Low-Level GLU.     (line  2311)
* gluTessBeginPolygon:                   Low-Level GLU.     (line  2327)
* gluTessCallback:                       Low-Level GLU.     (line  2356)
* gluTessEndContour:                     Low-Level GLU.     (line  2312)
* gluTessEndPolygon:                     Low-Level GLU.     (line  2583)
* gluTessNormal:                         Low-Level GLU.     (line  2604)
* gluTessProperty:                       Low-Level GLU.     (line  2641)
* gluTessVertex:                         Low-Level GLU.     (line  2718)
* gluUnProject:                          Low-Level GLU.     (line  2800)
* gluUnProject4:                         Low-Level GLU.     (line  2743)
* glValidateProgram:                     Low-Level GL.      (line 20313)
* glVertex2d:                            Low-Level GL.      (line 20614)
* glVertex2dv:                           Low-Level GL.      (line 20626)
* glVertex2f:                            Low-Level GL.      (line 20613)
* glVertex2fv:                           Low-Level GL.      (line 20625)
* glVertex2i:                            Low-Level GL.      (line 20612)
* glVertex2iv:                           Low-Level GL.      (line 20624)
* glVertex2s:                            Low-Level GL.      (line 20611)
* glVertex2sv:                           Low-Level GL.      (line 20623)
* glVertex3d:                            Low-Level GL.      (line 20618)
* glVertex3dv:                           Low-Level GL.      (line 20630)
* glVertex3f:                            Low-Level GL.      (line 20617)
* glVertex3fv:                           Low-Level GL.      (line 20629)
* glVertex3i:                            Low-Level GL.      (line 20616)
* glVertex3iv:                           Low-Level GL.      (line 20628)
* glVertex3s:                            Low-Level GL.      (line 20615)
* glVertex3sv:                           Low-Level GL.      (line 20627)
* glVertex4d:                            Low-Level GL.      (line 20622)
* glVertex4dv:                           Low-Level GL.      (line 20634)
* glVertex4f:                            Low-Level GL.      (line 20621)
* glVertex4fv:                           Low-Level GL.      (line 20633)
* glVertex4i:                            Low-Level GL.      (line 20620)
* glVertex4iv:                           Low-Level GL.      (line 20632)
* glVertex4s:                            Low-Level GL.      (line 20619)
* glVertex4sv:                           Low-Level GL.      (line 20631)
* glVertexAttrib1d:                      Low-Level GL.      (line 20430)
* glVertexAttrib1dv:                     Low-Level GL.      (line 20443)
* glVertexAttrib1f:                      Low-Level GL.      (line 20428)
* glVertexAttrib1fv:                     Low-Level GL.      (line 20441)
* glVertexAttrib1s:                      Low-Level GL.      (line 20429)
* glVertexAttrib1sv:                     Low-Level GL.      (line 20442)
* glVertexAttrib2d:                      Low-Level GL.      (line 20433)
* glVertexAttrib2dv:                     Low-Level GL.      (line 20446)
* glVertexAttrib2f:                      Low-Level GL.      (line 20431)
* glVertexAttrib2fv:                     Low-Level GL.      (line 20444)
* glVertexAttrib2s:                      Low-Level GL.      (line 20432)
* glVertexAttrib2sv:                     Low-Level GL.      (line 20445)
* glVertexAttrib3d:                      Low-Level GL.      (line 20436)
* glVertexAttrib3dv:                     Low-Level GL.      (line 20449)
* glVertexAttrib3f:                      Low-Level GL.      (line 20434)
* glVertexAttrib3fv:                     Low-Level GL.      (line 20447)
* glVertexAttrib3s:                      Low-Level GL.      (line 20435)
* glVertexAttrib3sv:                     Low-Level GL.      (line 20448)
* glVertexAttrib4bv:                     Low-Level GL.      (line 20454)
* glVertexAttrib4d:                      Low-Level GL.      (line 20439)
* glVertexAttrib4dv:                     Low-Level GL.      (line 20452)
* glVertexAttrib4f:                      Low-Level GL.      (line 20437)
* glVertexAttrib4fv:                     Low-Level GL.      (line 20450)
* glVertexAttrib4iv:                     Low-Level GL.      (line 20453)
* glVertexAttrib4Nbv:                    Low-Level GL.      (line 20458)
* glVertexAttrib4Niv:                    Low-Level GL.      (line 20460)
* glVertexAttrib4Nsv:                    Low-Level GL.      (line 20459)
* glVertexAttrib4Nub:                    Low-Level GL.      (line 20440)
* glVertexAttrib4Nubv:                   Low-Level GL.      (line 20461)
* glVertexAttrib4Nuiv:                   Low-Level GL.      (line 20463)
* glVertexAttrib4Nusv:                   Low-Level GL.      (line 20462)
* glVertexAttrib4s:                      Low-Level GL.      (line 20438)
* glVertexAttrib4sv:                     Low-Level GL.      (line 20451)
* glVertexAttrib4ubv:                    Low-Level GL.      (line 20455)
* glVertexAttrib4uiv:                    Low-Level GL.      (line 20457)
* glVertexAttrib4usv:                    Low-Level GL.      (line 20456)
* glVertexAttribPointer:                 Low-Level GL.      (line 20353)
* glVertexPointer:                       Low-Level GL.      (line 20558)
* glViewport:                            Low-Level GL.      (line 20652)
* glWindowPos2d:                         Low-Level GL.      (line 20689)
* glWindowPos2dv:                        Low-Level GL.      (line 20697)
* glWindowPos2f:                         Low-Level GL.      (line 20688)
* glWindowPos2fv:                        Low-Level GL.      (line 20696)
* glWindowPos2i:                         Low-Level GL.      (line 20687)
* glWindowPos2iv:                        Low-Level GL.      (line 20695)
* glWindowPos2s:                         Low-Level GL.      (line 20686)
* glWindowPos2sv:                        Low-Level GL.      (line 20694)
* glWindowPos3d:                         Low-Level GL.      (line 20693)
* glWindowPos3dv:                        Low-Level GL.      (line 20701)
* glWindowPos3f:                         Low-Level GL.      (line 20692)
* glWindowPos3fv:                        Low-Level GL.      (line 20700)
* glWindowPos3i:                         Low-Level GL.      (line 20691)
* glWindowPos3iv:                        Low-Level GL.      (line 20699)
* glWindowPos3s:                         Low-Level GL.      (line 20690)
* glWindowPos3sv:                        Low-Level GL.      (line 20698)
* glx-amd-gpu-association:               GLX Enumerations.  (line   211)
* glx-arb-create-context-robustness:     GLX Enumerations.  (line   221)
* glx-attribute:                         GLX Enumerations.  (line   119)
* glx-bind-to-texture-target-mask:       GLX Enumerations.  (line    94)
* glx-context-flags:                     GLX Enumerations.  (line   102)
* glx-context-profile-mask:              GLX Enumerations.  (line   110)
* glx-drawable-type-mask:                GLX Enumerations.  (line    26)
* glx-error-code:                        GLX Enumerations.  (line    17)
* glx-event-mask:                        GLX Enumerations.  (line    50)
* glx-hyperpipe-attrib:                  GLX Enumerations.  (line    79)
* glx-hyperpipe-misc:                    GLX Enumerations.  (line    87)
* glx-hyperpipe-type-mask:               GLX Enumerations.  (line    72)
* glx-pbuffer-clobber-mask:              GLX Enumerations.  (line    58)
* glx-render-type-mask:                  GLX Enumerations.  (line    34)
* glx-string-name:                       GLX Enumerations.  (line    10)
* glx-sync-type:                         GLX Enumerations.  (line    43)
* glXChooseFBConfig:                     Low-Level GLX.     (line    19)
* glXChooseVisual:                       Low-Level GLX.     (line   352)
* glXCopyContext:                        Low-Level GLX.     (line   487)
* glXCreateContext:                      Low-Level GLX.     (line   538)
* glXCreateGLXPixmap:                    Low-Level GLX.     (line   605)
* glXCreateNewContext:                   Low-Level GLX.     (line   649)
* glXCreatePbuffer:                      Low-Level GLX.     (line   722)
* glXCreatePixmap:                       Low-Level GLX.     (line   787)
* glXCreateWindow:                       Low-Level GLX.     (line   826)
* glXDestroyContext:                     Low-Level GLX.     (line   867)
* glXDestroyGLXPixmap:                   Low-Level GLX.     (line   883)
* glXDestroyPbuffer:                     Low-Level GLX.     (line   899)
* glXDestroyPixmap:                      Low-Level GLX.     (line   913)
* glXDestroyWindow:                      Low-Level GLX.     (line   927)
* glXFreeContextEXT:                     Low-Level GLX.     (line   941)
* glXGetClientString:                    Low-Level GLX.     (line   964)
* glXGetConfig:                          Low-Level GLX.     (line   995)
* glXGetContextIDEXT:                    Low-Level GLX.     (line  1126)
* glXGetCurrentContext:                  Low-Level GLX.     (line  1147)
* glXGetCurrentDisplay:                  Low-Level GLX.     (line  1157)
* glXGetCurrentDrawable:                 Low-Level GLX.     (line  1167)
* glXGetCurrentReadDrawable:             Low-Level GLX.     (line  1177)
* glXGetFBConfigAttrib:                  Low-Level GLX.     (line  1187)
* glXGetFBConfigs:                       Low-Level GLX.     (line  1405)
* glXGetProcAddress:                     Low-Level GLX.     (line  1421)
* glXGetSelectedEvent:                   Low-Level GLX.     (line  1433)
* glXGetVisualFromFBConfig:              Low-Level GLX.     (line  1453)
* glXImportContextEXT:                   Low-Level GLX.     (line  1470)
* glXIsDirect:                           Low-Level GLX.     (line  1509)
* glXMakeContextCurrent:                 Low-Level GLX.     (line  1526)
* glXMakeCurrent:                        Low-Level GLX.     (line  1613)
* glXQueryContext:                       Low-Level GLX.     (line  1728)
* glXQueryContextInfoEXT:                Low-Level GLX.     (line  1678)
* glXQueryDrawable:                      Low-Level GLX.     (line  1765)
* glXQueryExtension:                     Low-Level GLX.     (line  1831)
* glXQueryExtensionsString:              Low-Level GLX.     (line  1816)
* glXQueryServerString:                  Low-Level GLX.     (line  1853)
* glXQueryVersion:                       Low-Level GLX.     (line  1872)
* glXSelectEvent:                        Low-Level GLX.     (line  1898)
* glXSwapBuffers:                        Low-Level GLX.     (line  2026)
* glXUseXFont:                           Low-Level GLX.     (line  2057)
* glXWaitGL:                             Low-Level GLX.     (line  2102)
* glXWaitX:                              Low-Level GLX.     (line  2118)
* hide-window:                           Window Management. (line    50)
* hint-mode:                             GL Enumerations.   (line  1405)
* hint-target:                           GL Enumerations.   (line  1412)
* histogram-target-ext:                  GL Enumerations.   (line  1423)
* hp-convolution-border-modes:           GL Enumerations.   (line  2676)
* ibm-texture-mirrored-repeat:           GL Enumerations.   (line  3212)
* iconify-window:                        Window Management. (line    52)
* img-multisampled-render-to-texture:    GL Enumerations.   (line  6167)
* img-program-binary:                    GL Enumerations.   (line  6160)
* img-shader-binary:                     GL Enumerations.   (line  5217)
* img-texture-compression-pvrtc:         GL Enumerations.   (line  5207)
* img-texture-compression-pvrtc-2:       GL Enumerations.   (line  6176)
* img-texture-env-enhanced-fixed-function: GL Enumerations. (line  4001)
* index-pointer-type:                    GL Enumerations.   (line  1430)
* ingr-color-clamp:                      GL Enumerations.   (line  3713)
* ingr-interlace-read:                   GL Enumerations.   (line  3723)
* initial-display-mode:                  State Retrieval.   (line    60)
* initial-window-height:                 State Retrieval.   (line    62)
* initial-window-position:               State Retrieval.   (line    64)
* initial-window-size:                   State Retrieval.   (line    66)
* initial-window-width:                  State Retrieval.   (line    68)
* initial-window-x:                      State Retrieval.   (line    70)
* initial-window-y:                      State Retrieval.   (line    72)
* initialize-glut:                       GLUT Initialization.
                                                            (line    12)
* intel-map-texture:                     GL Enumerations.   (line   470)
* intel-parallel-arrays:                 GL Enumerations.   (line  3263)
* interleaved-array-format:              GL Enumerations.   (line  2043)
* khr-debug:                             GL Enumerations.   (line   307)
* light-env-mode-sgix:                   GL Enumerations.   (line  1437)
* light-env-parameter-sgix:              GL Enumerations.   (line  1444)
* light-model-color-control:             GL Enumerations.   (line  1451)
* light-model-parameter:                 GL Enumerations.   (line  1458)
* light-name:                            GL Enumerations.   (line  2067)
* light-parameter:                       GL Enumerations.   (line  1466)
* list-mode:                             GL Enumerations.   (line  1475)
* list-name-type:                        GL Enumerations.   (line  1576)
* list-parameter-name:                   GL Enumerations.   (line  1584)
* logic-op:                              GL Enumerations.   (line  1591)
* make-sub-window:                       Window Management. (line    30)
* make-window:                           Window Management. (line    32)
* map-target:                            GL Enumerations.   (line  1600)
* material-face:                         GL Enumerations.   (line  1614)
* material-parameter:                    GL Enumerations.   (line  1621)
* matrix-mode:                           GL Enumerations.   (line  1629)
* mesa-pack-invert:                      GL Enumerations.   (line  4170)
* mesa-packed-depth-stencil:             GL Enumerations.   (line  4151)
* mesa-program-debug:                    GL Enumerations.   (line  5175)
* mesa-shader-debug:                     GL Enumerations.   (line  4186)
* mesa-trace:                            GL Enumerations.   (line  4160)
* mesa-ycbcr-texture:                    GL Enumerations.   (line  3827)
* mesax-texture-stack:                   GL Enumerations.   (line  4177)
* mesh-mode-1:                           GL Enumerations.   (line  1636)
* mesh-mode-2:                           GL Enumerations.   (line  1643)
* minmax-target-ext:                     GL Enumerations.   (line  1650)
* normal-pointer-type:                   GL Enumerations.   (line  1657)
* nv-compute-program-5:                  GL Enumerations.   (line  6125)
* nv-conditional-render:                 GL Enumerations.   (line  5692)
* nv-copy-depth-to-color:                GL Enumerations.   (line  4566)
* nv-coverage-sample:                    GL Enumerations.   (line  5848)
* nv-deep-texture-3d:                    GL Enumerations.   (line  6103)
* nv-depth-buffer-float:                 GL Enumerations.   (line  5581)
* nv-depth-clamp:                        GL Enumerations.   (line  3900)
* nv-depth-nonlinear:                    GL Enumerations.   (line  5726)
* nv-draw-buffers:                       GL Enumerations.   (line  4423)
* nv-evaluators:                         GL Enumerations.   (line  4018)
* nv-explicit-multisample:               GL Enumerations.   (line  5795)
* nv-fbo-color-attachments:              GL Enumerations.   (line  5459)
* nv-fence:                              GL Enumerations.   (line  3475)
* nv-float-buffer:                       GL Enumerations.   (line  4594)
* nv-fog-distance:                       GL Enumerations.   (line  3699)
* nv-fragment-program:                   GL Enumerations.   (line  4557)
* nv-fragment-program-2:                 GL Enumerations.   (line  4690)
* nv-framebuffer-blit:                   GL Enumerations.   (line  5409)
* nv-framebuffer-multisample:            GL Enumerations.   (line  5433)
* nv-framebuffer-multisample-coverage:   GL Enumerations.   (line  5441)
* nv-geometry-program-4:                 GL Enumerations.   (line   605)
* nv-gpu-program-4:                      GL Enumerations.   (line  4742)
* nv-gpu-program-5:                      GL Enumerations.   (line  5807)
* nv-gpu-shader-5:                       GL Enumerations.   (line   649)
* nv-half-float:                         GL Enumerations.   (line  1531)
* nv-instanced-arrays:                   GL Enumerations.   (line  4735)
* nv-light-max-exponent:                 GL Enumerations.   (line  3584)
* nv-multisample-coverage:               GL Enumerations.   (line  2421)
* nv-occlusion-query:                    GL Enumerations.   (line  4540)
* nv-packed-depth-stencil:               GL Enumerations.   (line  3542)
* nv-parameter-buffer-object:            GL Enumerations.   (line  5570)
* nv-path-rendering:                     GL Enumerations.   (line  6023)
* nv-pixel-data-range:                   GL Enumerations.   (line  4573)
* nv-point-sprite:                       GL Enumerations.   (line  4518)
* nv-present-video:                      GL Enumerations.   (line  5718)
* nv-present-video <1>:                  GLX Enumerations.  (line   183)
* nv-primitive-restart:                  GL Enumerations.   (line  3692)
* nv-read-buffer:                        GL Enumerations.   (line  1360)
* nv-register-combiners:                 GL Enumerations.   (line  3659)
* nv-register-combiners-2:               GL Enumerations.   (line  3685)
* nv-s-rgb-formats:                      GL Enumerations.   (line  4664)
* nv-shader-buffer-load:                 GL Enumerations.   (line  5859)
* nv-shader-buffer-store:                GL Enumerations.   (line  4627)
* nv-shadow-samplers-array:              GL Enumerations.   (line  5648)
* nv-shadow-samplers-cube:               GL Enumerations.   (line  5655)
* nv-tessellation-program-5:             GL Enumerations.   (line  4036)
* nv-texgen-emboss:                      GL Enumerations.   (line  3706)
* nv-texgen-reflection:                  GL Enumerations.   (line  3619)
* nv-texture-border-clamp:               GL Enumerations.   (line  1398)
* nv-texture-env-combine-4:              GL Enumerations.   (line  3743)
* nv-texture-expand-normal:              GL Enumerations.   (line  4605)
* nv-texture-multisample:                GL Enumerations.   (line  6009)
* nv-texture-rectangle:                  GL Enumerations.   (line  3526)
* nv-texture-shader:                     GL Enumerations.   (line  4046)
* nv-texture-shader-2:                   GL Enumerations.   (line  4091)
* nv-texture-shader-3:                   GL Enumerations.   (line  4494)
* nv-transform-feedback:                 GL Enumerations.   (line  5344)
* nv-transform-feedback-2:               GL Enumerations.   (line  5709)
* nv-vdpau-interop:                      GL Enumerations.   (line  4083)
* nv-vertex-array-range:                 GL Enumerations.   (line  3640)
* nv-vertex-attrib-integer-64-bit:       GL Enumerations.   (line  1569)
* nv-vertex-buffer-unified-memory:       GL Enumerations.   (line  5867)
* nv-vertex-program:                     GL Enumerations.   (line  3849)
* nv-vertex-program-2-option:            GL Enumerations.   (line  4683)
* nv-vertex-program-3:                   GL Enumerations.   (line  5088)
* nv-vertex-program-4:                   GL Enumerations.   (line  4707)
* nv-video-capture:                      GL Enumerations.   (line  5984)
* oes-blend-equation-separate:           GL Enumerations.   (line  2225)
* oes-blend-func-separate:               GL Enumerations.   (line  2503)
* oes-blend-subtract:                    GL Enumerations.   (line  2240)
* oes-compressed-etc1-rgb8-texture:      GL Enumerations.   (line  5501)
* oes-compressed-paletted-texture:       GL Enumerations.   (line  5150)
* oes-depth-24:                          GL Enumerations.   (line  2814)
* oes-depth-32:                          GL Enumerations.   (line  2821)
* oes-depth-texture:                     GL Enumerations.   (line  1688)
* oes-draw-texture:                      GL Enumerations.   (line  5168)
* oes-egl-image-external:                GL Enumerations.   (line  5508)
* oes-element-index-uint:                GL Enumerations.   (line  1491)
* oes-fixed-point:                       GL Enumerations.   (line  1562)
* oes-framebuffer-object:                GL Enumerations.   (line   797)
* oes-get-program-binary:                GL Enumerations.   (line  4112)
* oes-mapbuffer:                         GL Enumerations.   (line  4619)
* oes-matrix-get:                        GL Enumerations.   (line  4833)
* oes-matrix-palette:                    GL Enumerations.   (line  3979)
* oes-packed-depth-stencil:              GL Enumerations.   (line  3549)
* oes-point-size-array:                  GL Enumerations.   (line  4824)
* oes-point-sprite:                      GL Enumerations.   (line  4525)
* oes-read-format:                       GL Enumerations.   (line  5160)
* oes-rgb-8-rgba-8:                      GL Enumerations.   (line  2036)
* oes-standard-derivatives:              GL Enumerations.   (line  5131)
* oes-stencil-1:                         GL Enumerations.   (line  5466)
* oes-stencil-4:                         GL Enumerations.   (line  5473)
* oes-stencil-8:                         GL Enumerations.   (line  5480)
* oes-stencil-wrap:                      GL Enumerations.   (line  3598)
* oes-surfaceless-context:               GL Enumerations.   (line  2950)
* oes-texture-3d:                        GL Enumerations.   (line  2361)
* oes-texture-cube-map:                  GL Enumerations.   (line  1933)
* oes-texture-env-crossbar:              GL Enumerations.   (line  3433)
* oes-texture-float:                     GL Enumerations.   (line  1499)
* oes-texture-mirrored-repeat:           GL Enumerations.   (line  3219)
* oes-vertex-half-float:                 GL Enumerations.   (line  5487)
* oes-vertex-type-10-10-10-2:            GL Enumerations.   (line  5685)
* oml-interlace:                         GL Enumerations.   (line  4801)
* oml-resample:                          GL Enumerations.   (line  4815)
* oml-subsample:                         GL Enumerations.   (line  4808)
* pixel-copy-type:                       GL Enumerations.   (line  1664)
* pixel-format:                          GL Enumerations.   (line  1678)
* pixel-internal-format:                 GL Enumerations.   (line  2012)
* pixel-map:                             GL Enumerations.   (line  1702)
* pixel-store-parameter:                 GL Enumerations.   (line  1712)
* pixel-store-resample-mode:             GL Enumerations.   (line  1731)
* pixel-store-subsample-rate:            GL Enumerations.   (line  1739)
* pixel-tex-gen-mode:                    GL Enumerations.   (line  1747)
* pixel-tex-gen-parameter-name-sgis:     GL Enumerations.   (line  1757)
* pixel-transfer-parameter:              GL Enumerations.   (line  1765)
* pixel-type:                            GL Enumerations.   (line  1789)
* point-parameter-name-sgis:             GL Enumerations.   (line  1799)
* polygon-mode:                          GL Enumerations.   (line  1807)
* pop-window:                            Window Management. (line    34)
* position-window:                       Window Management. (line    36)
* post-redisplay:                        Window Management. (line    38)
* push-window:                           Window Management. (line    40)
* qcom-alpha-test:                       GL Enumerations.   (line  1337)
* qcom-binning-control:                  GL Enumerations.   (line  5925)
* qcom-driver-control:                   GL Enumerations.   (line  5918)
* qcom-extended-get:                     GL Enumerations.   (line  5196)
* qcom-writeonly-rendering:              GL Enumerations.   (line  4392)
* read-buffer-mode:                      GL Enumerations.   (line  1814)
* rend-screen-coordinates:               GL Enumerations.   (line  3410)
* rendering-mode:                        GL Enumerations.   (line  1822)
* reshape-window:                        Window Management. (line    42)
* s3-s-3-tc:                             GL Enumerations.   (line  3226)
* sample-pattern-sgis:                   GL Enumerations.   (line  1829)
* screen-height:                         State Retrieval.   (line    46)
* screen-height-mm:                      State Retrieval.   (line    48)
* screen-size:                           State Retrieval.   (line    50)
* screen-size-mm:                        State Retrieval.   (line    52)
* screen-width:                          State Retrieval.   (line    54)
* screen-width-mm:                       State Retrieval.   (line    56)
* separable-target-ext:                  GL Enumerations.   (line  1837)
* set-button-box-callback:               Callback Registration.
                                                            (line     6)
* set-current-window:                    Callback Registration.
                                                            (line     8)
* set-dials-callback:                    Callback Registration.
                                                            (line    10)
* set-display-callback:                  Callback Registration.
                                                            (line    12)
* set-entry-callback:                    Callback Registration.
                                                            (line    14)
* set-gl-accumulation-buffer-operation:  Per Fragment Operations.
                                                            (line    95)
* set-gl-active-texture:                 OpenGL Operation.  (line   120)
* set-gl-alpha-function:                 Per Fragment Operations.
                                                            (line    37)
* set-gl-blend-color:                    Per Fragment Operations.
                                                            (line    45)
* set-gl-blend-equation:                 Per Fragment Operations.
                                                            (line    19)
* set-gl-blend-function:                 Per Fragment Operations.
                                                            (line    24)
* set-gl-clear-accumulation-color:       Per Fragment Operations.
                                                            (line    92)
* set-gl-clear-color:                    Per Fragment Operations.
                                                            (line    80)
* set-gl-clear-depth:                    Per Fragment Operations.
                                                            (line    86)
* set-gl-clear-index:                    Per Fragment Operations.
                                                            (line    83)
* set-gl-clear-stencil-value:            Per Fragment Operations.
                                                            (line    89)
* set-gl-color-mask:                     Per Fragment Operations.
                                                            (line    70)
* set-gl-depth-function:                 Per Fragment Operations.
                                                            (line    41)
* set-gl-depth-mask:                     Per Fragment Operations.
                                                            (line    73)
* set-gl-draw-buffer:                    Per Fragment Operations.
                                                            (line    63)
* set-gl-draw-buffers:                   Per Fragment Operations.
                                                            (line    54)
* set-gl-index-mask:                     Per Fragment Operations.
                                                            (line    66)
* set-gl-logic-operation:                Per Fragment Operations.
                                                            (line    48)
* set-gl-matrix-mode:                    OpenGL Operation.  (line    88)
* set-gl-read-buffer:                    Per Fragment Operations.
                                                            (line   103)
* set-gl-sample-coverage:                Per Fragment Operations.
                                                            (line    34)
* set-gl-scissor:                        Per Fragment Operations.
                                                            (line    30)
* set-gl-shade-model:                    OpenGL Operation.  (line   130)
* set-gl-stencil-function:               Per Fragment Operations.
                                                            (line     6)
* set-gl-stencil-mask:                   Per Fragment Operations.
                                                            (line    58)
* set-gl-stencil-operation:              Per Fragment Operations.
                                                            (line    12)
* set-idle-callback:                     Callback Registration.
                                                            (line    16)
* set-initial-display-mode:              GLUT Initialization.
                                                            (line     6)
* set-initial-window-position:           GLUT Initialization.
                                                            (line     8)
* set-initial-window-size:               GLUT Initialization.
                                                            (line    10)
* set-keyboard-callback:                 Callback Registration.
                                                            (line    18)
* set-menu-status-callback:              Callback Registration.
                                                            (line    20)
* set-motion-callback:                   Callback Registration.
                                                            (line    22)
* set-mouse-callback:                    Callback Registration.
                                                            (line    24)
* set-overlay-display-callback:          Callback Registration.
                                                            (line    26)
* set-passive-motion-callback:           Callback Registration.
                                                            (line    28)
* set-reshape-callback:                  Callback Registration.
                                                            (line    30)
* set-spaceball-button-callback:         Callback Registration.
                                                            (line    32)
* set-spaceball-motion-callback:         Callback Registration.
                                                            (line    34)
* set-spaceball-rotate-callback:         Callback Registration.
                                                            (line    36)
* set-special-callback:                  Callback Registration.
                                                            (line    38)
* set-tablet-button-callback:            Callback Registration.
                                                            (line    40)
* set-tablet-motion-callback:            Callback Registration.
                                                            (line    42)
* set-visibility-callback:               Callback Registration.
                                                            (line    44)
* set-window-cursor!:                    Window Management. (line    12)
* set-window-icon-title!:                Window Management. (line    14)
* set-window-title!:                     Window Management. (line    16)
* sgi-color-matrix:                      GL Enumerations.   (line  2436)
* sgi-color-table:                       GL Enumerations.   (line  2518)
* sgi-texture-color-table:               GL Enumerations.   (line  2452)
* sgis-detail-texture:                   GL Enumerations.   (line  2399)
* sgis-fog-function:                     GL Enumerations.   (line  2587)
* sgis-generate-mipmap:                  GL Enumerations.   (line  2767)
* sgis-multisample:                      GL Enumerations.   (line  2409)
* sgis-pixel-texture:                    GL Enumerations.   (line  3173)
* sgis-point-line-texgen:                GL Enumerations.   (line  2909)
* sgis-point-parameters:                 GL Enumerations.   (line  2579)
* sgis-sharpen-texture:                  GL Enumerations.   (line  2428)
* sgis-texture-4d:                       GL Enumerations.   (line  2623)
* sgis-texture-border-clamp:             GL Enumerations.   (line  2602)
* sgis-texture-color-mask:               GL Enumerations.   (line  2902)
* sgis-texture-edge-clamp:               GL Enumerations.   (line  2616)
* sgis-texture-filter-4:                 GL Enumerations.   (line  2660)
* sgis-texture-lod:                      GL Enumerations.   (line  2641)
* sgis-texture-select:                   GL Enumerations.   (line  2547)
* sgix-async:                            GL Enumerations.   (line  3137)
* sgix-async-histogram:                  GL Enumerations.   (line  3144)
* sgix-async-pixel:                      GL Enumerations.   (line  3188)
* sgix-blend-alpha-minmax:               GL Enumerations.   (line  3123)
* sgix-calligraphic-fragment:            GL Enumerations.   (line  2734)
* sgix-clipmap:                          GL Enumerations.   (line  2684)
* sgix-convolution-accuracy:             GL Enumerations.   (line  3100)
* sgix-depth-pass-instrument:            GL Enumerations.   (line  3083)
* sgix-depth-texture:                    GL Enumerations.   (line  2806)
* sgix-fog-offset:                       GL Enumerations.   (line  2782)
* sgix-fragment-lighting:                GL Enumerations.   (line  3273)
* sgix-fragments-instrument:             GL Enumerations.   (line  3092)
* sgix-framezoom:                        GL Enumerations.   (line  2751)
* sgix-icc-texture:                      GL Enumerations.   (line  3401)
* sgix-impact-pixel-texture:             GL Enumerations.   (line  2741)
* sgix-instruments:                      GL Enumerations.   (line  2720)
* sgix-interlace:                        GL Enumerations.   (line  2392)
* sgix-ir-instrument-1:                  GL Enumerations.   (line  2713)
* sgix-line-quality-hint:                GL Enumerations.   (line  3181)
* sgix-list-priority:                    GL Enumerations.   (line  2727)
* sgix-pixel-texture:                    GL Enumerations.   (line  2634)
* sgix-pixel-tiles:                      GL Enumerations.   (line  2649)
* sgix-polynomial-ffd:                   GL Enumerations.   (line  2774)
* sgix-reference-plane:                  GL Enumerations.   (line  2706)
* sgix-resample:                         GL Enumerations.   (line  3292)
* sgix-scalebias-hint:                   GL Enumerations.   (line  3130)
* sgix-shadow:                           GL Enumerations.   (line  2789)
* sgix-shadow-ambient:                   GL Enumerations.   (line  2466)
* sgix-slim:                             GL Enumerations.   (line  3114)
* sgix-sprite:                           GL Enumerations.   (line  2667)
* sgix-subsample:                        GL Enumerations.   (line  3751)
* sgix-texture-add-env:                  GL Enumerations.   (line  2459)
* sgix-texture-coordinate-clamp:         GL Enumerations.   (line  3197)
* sgix-texture-lod-bias:                 GL Enumerations.   (line  2759)
* sgix-texture-multi-buffer:             GL Enumerations.   (line  2609)
* sgix-texture-scale-bias:               GL Enumerations.   (line  2697)
* sgix-vertex-preclip:                   GL Enumerations.   (line  3234)
* sgix-ycrcb:                            GL Enumerations.   (line  2867)
* sgix-ycrcba:                           GL Enumerations.   (line  3107)
* shading-model:                         GL Enumerations.   (line  1844)
* show-window:                           Window Management. (line    18)
* stencil-function:                      GL Enumerations.   (line  1851)
* stencil-op:                            GL Enumerations.   (line  1859)
* string-name:                           GL Enumerations.   (line  1866)
* sub-window?:                           Window Management. (line    20)
* sun-global-alpha:                      GL Enumerations.   (line  2895)
* sun-mesh-array:                        GL Enumerations.   (line  3842)
* sun-slice-accum:                       GL Enumerations.   (line  3835)
* sunx-constant-data:                    GL Enumerations.   (line  2888)
* sunx-general-triangle-list:            GL Enumerations.   (line  2874)
* swap-buffers:                          Window Management. (line    22)
* tex-coord-pointer-type:                GL Enumerations.   (line  1873)
* texture-coord-name:                    GL Enumerations.   (line  1880)
* texture-env-mode:                      GL Enumerations.   (line  1887)
* texture-env-parameter:                 GL Enumerations.   (line  1895)
* texture-env-target:                    GL Enumerations.   (line  1902)
* texture-filter-func-sgis:              GL Enumerations.   (line  1909)
* texture-gen-mode:                      GL Enumerations.   (line  1916)
* texture-gen-parameter:                 GL Enumerations.   (line  1925)
* texture-mag-filter:                    GL Enumerations.   (line  1948)
* texture-min-filter:                    GL Enumerations.   (line  1960)
* texture-parameter-name:                GL Enumerations.   (line  1973)
* texture-target:                        GL Enumerations.   (line  1994)
* texture-wrap-mode:                     GL Enumerations.   (line  2005)
* top-level-window?:                     Window Management. (line    24)
* version-1-2:                           GL Enumerations.   (line  2085)
* version-1-3:                           GL Enumerations.   (line    22)
* version-1-4:                           GL Enumerations.   (line  2473)
* version-1-5:                           GL Enumerations.   (line  3301)
* version-2-0:                           GL Enumerations.   (line  2157)
* version-2-1:                           GL Enumerations.   (line  3388)
* version-3-0:                           GL Enumerations.   (line   106)
* version-3-1:                           GL Enumerations.   (line  3482)
* version-3-2:                           GL Enumerations.   (line   493)
* version-3-3:                           GL Enumerations.   (line  4714)
* version-4-1:                           GL Enumerations.   (line  5494)
* version-4-3:                           GL Enumerations.   (line   299)
* vertex-pointer-type:                   GL Enumerations.   (line  2052)
* viv-shader-binary:                     GL Enumerations.   (line  5933)
* window-alpha-size:                     State Retrieval.   (line     6)
* window-blue-size:                      State Retrieval.   (line     8)
* window-color-buffer-size:              State Retrieval.   (line    10)
* window-colormap-size:                  State Retrieval.   (line    12)
* window-depth-buffer-size:              State Retrieval.   (line    14)
* window-double-buffered?:               State Retrieval.   (line    16)
* window-green-size:                     State Retrieval.   (line    18)
* window-height:                         State Retrieval.   (line    20)
* window-id:                             Window Management. (line     6)
* window-live?:                          Window Management. (line     8)
* window-number-of-children:             State Retrieval.   (line    22)
* window-number-of-samples:              State Retrieval.   (line    24)
* window-parent:                         State Retrieval.   (line    26)
* window-position:                       State Retrieval.   (line    28)
* window-red-size:                       State Retrieval.   (line    30)
* window-rgba:                           State Retrieval.   (line    38)
* window-size:                           State Retrieval.   (line    32)
* window-stencil-buffer-size:            State Retrieval.   (line    34)
* window-stereo?:                        State Retrieval.   (line    36)
* window-width:                          State Retrieval.   (line    40)
* window-x:                              State Retrieval.   (line    42)
* window-y:                              State Retrieval.   (line    44)
* window?:                               Window Management. (line    10)
* with-gl-push-attrib:                   State and State Requests.
                                                            (line     9)
* with-gl-push-matrix:                   OpenGL Operation.  (line    91)
* with-window:                           Window Management. (line    26)
* with-window*:                          Window Management. (line    28)

